interactions:
- request:
    body: '{"input": [[3923, 374, 5546, 97478, 3571, 30]], "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '111'
      content-type:
      - application/json
      cookie:
      - __cf_bm=_SkX10_lz_dX1guPhghsUYAz4_9kWqoLA5uNrUkQB18-1727447406-1.0.1.1-Hbwqr14cIbBH0gj8B1mx9a96FHwcQ0zFiSd700EllAydhGfmuJvCorr0hPCbtfl2nG4OnDCQCd1OOKW5VHRCzg;
        _cfuvid=_gLrQReNbyL5vxKd7xmYmcYUDElVbJf1pTZYccPx6LE-1727447406444-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.48.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.48.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        n9P/+t7ov/71vwAAAP//AwB+tp2G3iAAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8c9c30940f5a4d10-BOS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Sep 2024 14:30:06 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      openai-model:
      - text-embedding-ada-002
      openai-organization:
      - user-wzxwdcuddhvwm09z43ibeucf
      openai-processing-ms:
      - '51'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '5000'
      x-ratelimit-limit-tokens:
      - '5000000'
      x-ratelimit-remaining-requests:
      - '4999'
      x-ratelimit-remaining-tokens:
      - '4999993'
      x-ratelimit-reset-requests:
      - 12ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_8e00650dfe0e32c9928f0acdd535ecb0
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are an assistant for question-answering
      tasks. Use the following pieces of retrieved context to answer the question.
      If you don''t know the answer, say that you don''t know. Use three sentences
      maximum and keep the answer concise.\n\nFig. 1. Overview of a LLM-powered autonomous
      agent system.\nComponent One: Planning#\nA complicated task usually involves
      many steps. An agent needs to know what they are and plan ahead.\nTask Decomposition#\nChain
      of thought (CoT; Wei et al. 2022) has become a standard prompting technique
      for enhancing model performance on complex tasks. The model is instructed to
      \u201cthink step by step\u201d to utilize more test-time computation to decompose
      hard tasks into smaller and simpler steps. CoT transforms big tasks into multiple
      manageable tasks and shed lights into an interpretation of the model\u2019s
      thinking process.\n\nTree of Thoughts (Yao et al. 2023) extends CoT by exploring
      multiple reasoning possibilities at each step. It first decomposes the problem
      into multiple thought steps and generates multiple thoughts per step, creating
      a tree structure. The search process can be BFS (breadth-first search) or DFS
      (depth-first search) with each state evaluated by a classifier (via a prompt)
      or majority vote.\nTask decomposition can be done (1) by LLM with simple prompting
      like \"Steps for XYZ.\\n1.\", \"What are the subgoals for achieving XYZ?\",
      (2) by using task-specific instructions; e.g. \"Write a story outline.\" for
      writing a novel, or (3) with human inputs.\n\nResources:\n1. Internet access
      for searches and information gathering.\n2. Long Term memory management.\n3.
      GPT-3.5 powered Agents for delegation of simple tasks.\n4. File output.\n\nPerformance
      Evaluation:\n1. Continuously review and analyze your actions to ensure you are
      performing to the best of your abilities.\n2. Constructively self-criticize
      your big-picture behavior constantly.\n3. Reflect on past decisions and strategies
      to refine your approach.\n4. Every command has a cost, so be smart and efficient.
      Aim to complete tasks in the least number of steps.\n\n(3) Task execution: Expert
      models execute on the specific tasks and log results.\nInstruction:\n\nWith
      the input and the inference results, the AI assistant needs to describe the
      process and results. The previous stages can be formed as - User Input: {{ User
      Input }}, Task Planning: {{ Tasks }}, Model Selection: {{ Model Assignment }},
      Task Execution: {{ Predictions }}. You must first answer the user''s request
      in a straightforward manner. Then describe the task process and show your analysis
      and model inference results to the user in the first person. If inference results
      contain a file path, must tell the user the complete file path.", "role": "system"},
      {"content": "What is Task Decomposition?", "role": "user"}], "model": "gpt-3.5-turbo",
      "n": 1, "stream": false, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '2913'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.48.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.48.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//dFLLbtswELz7KxY8x4ad2FHqW5MCBXrqwUBRFIVBUStpI5KrcFepjcD/
        XlB+9tALDzOc2dnHxwTAUGXWYFxr1YXeTz+/PH7VwllfLF+fu2H19NK9DT9+rhbh+/M3c5cVXL6i
        07Nq5jj0HpU4HmmX0Cpm10VxXyyXxXJejETgCn2WNb1OH2arqQ6p5Ol8cb86KVsmh2LW8GsCAPAx
        vjljrHBn1jC/OyMBRWyDZn35BGAS+4wYK0KiNqq5u5KOo2IcY2+sdFBhDs5COTmQgAVF10Z6GxAG
        wQqUoUxoO6j4T4RjmztQK50ARWWQYL3HBDZWIJTpBKLYyww2LQn0iR2KQIu+F7ANRhXgBOMgBFob
        K4/ZKpGziifrwAkB6xqd0jv6PZR7qOidKooNaIvhWDzYaBu0pUeQoRylM/hCdY0Jo0JAbbkS8NQh
        vLSWInANm5aHptUx8SYh3mACNtcNvef9sfnzhPC25zB4pT4XzY1CzQnQCmEC3KEb8jBnt2NPWA9i
        89rj4P0JP1z26LnpE5dy4i94TZGk3Sa0wjHvTJR7M7KHCcDv8V6Gf07A9IlDr1vlDmM2XBWfjn7m
        eqI37JlUVuuv+OPD0/9U2wrVkpebqzPHhBSbq8P8EnPs08heFMO2pthg6hONRzhO4zD5CwAA//8D
        AG4JLPWDAwAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8c9c30957b308f65-BOS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Sep 2024 14:30:08 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=S9CaKJjlRKMgapR4feoPhcVCXu5HNw9ouMhsxuXq.sU-1727447408-1.0.1.1-B03gfQ5b8oM_0t6ZzWgUnOaIkcduwHoYgZP7H25Nf0pCKbUSHSBUbDPq2zhHWxP7OPqNXr8lGZCszwLJOlg8YQ;
        path=/; expires=Fri, 27-Sep-24 15:00:08 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=ty_zC0bzJUD.U5UPPZYqWFP.KB3qzsUYJFkIrsa_930-1727447408230-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      openai-organization:
      - user-wzxwdcuddhvwm09z43ibeucf
      openai-processing-ms:
      - '1065'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '5000'
      x-ratelimit-limit-tokens:
      - '4000000'
      x-ratelimit-remaining-requests:
      - '4999'
      x-ratelimit-remaining-tokens:
      - '3999302'
      x-ratelimit-reset-requests:
      - 12ms
      x-ratelimit-reset-tokens:
      - 10ms
      x-request-id:
      - req_1854101c74b5825425a38ebbd5e7745c
    status:
      code: 200
      message: OK
version: 1
