interactions:
- request:
    body: '{"input": [[3923, 374, 5546, 97478, 3571, 30]], "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '111'
      content-type:
      - application/json
      cookie:
      - __cf_bm=IkziaTvtUmKlpJ6hBD6feB_TIDyI4boVZA3o2BPhCL8-1727449102-1.0.1.1-O.6GwXzEQt97Xmx063yop4OpodgHCXvPoDrm2j1o11fitCx.HXCK6l3aOcxSYn8ImB8TrwwExhm9.i3_joGUXg;
        _cfuvid=mUjgjvAf3oXRxknfOJFguM.7C1A0icg48urbm4Rrj7I-1727449102443-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.48.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.48.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        fradht4gAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8c9c59ff3f3d8fb4-BOS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Sep 2024 14:58:23 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      openai-model:
      - text-embedding-ada-002
      openai-organization:
      - user-wzxwdcuddhvwm09z43ibeucf
      openai-processing-ms:
      - '20'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '5000'
      x-ratelimit-limit-tokens:
      - '5000000'
      x-ratelimit-remaining-requests:
      - '4999'
      x-ratelimit-remaining-tokens:
      - '4999993'
      x-ratelimit-reset-requests:
      - 12ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_2b769afae4e87512af0cb42ed7021fa2
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are an assistant for question-answering
      tasks. Use the following pieces of retrieved context to answer the question.
      If you don''t know the answer, say that you don''t know. Use three sentences
      maximum and keep the answer concise.\n\nFig. 1. Overview of a LLM-powered autonomous
      agent system.\nComponent One: Planning#\nA complicated task usually involves
      many steps. An agent needs to know what they are and plan ahead.\nTask Decomposition#\nChain
      of thought (CoT; Wei et al. 2022) has become a standard prompting technique
      for enhancing model performance on complex tasks. The model is instructed to
      \u201cthink step by step\u201d to utilize more test-time computation to decompose
      hard tasks into smaller and simpler steps. CoT transforms big tasks into multiple
      manageable tasks and shed lights into an interpretation of the model\u2019s
      thinking process.\n\nTree of Thoughts (Yao et al. 2023) extends CoT by exploring
      multiple reasoning possibilities at each step. It first decomposes the problem
      into multiple thought steps and generates multiple thoughts per step, creating
      a tree structure. The search process can be BFS (breadth-first search) or DFS
      (depth-first search) with each state evaluated by a classifier (via a prompt)
      or majority vote.\nTask decomposition can be done (1) by LLM with simple prompting
      like \"Steps for XYZ.\\n1.\", \"What are the subgoals for achieving XYZ?\",
      (2) by using task-specific instructions; e.g. \"Write a story outline.\" for
      writing a novel, or (3) with human inputs.\n\nResources:\n1. Internet access
      for searches and information gathering.\n2. Long Term memory management.\n3.
      GPT-3.5 powered Agents for delegation of simple tasks.\n4. File output.\n\nPerformance
      Evaluation:\n1. Continuously review and analyze your actions to ensure you are
      performing to the best of your abilities.\n2. Constructively self-criticize
      your big-picture behavior constantly.\n3. Reflect on past decisions and strategies
      to refine your approach.\n4. Every command has a cost, so be smart and efficient.
      Aim to complete tasks in the least number of steps.\n\n(3) Task execution: Expert
      models execute on the specific tasks and log results.\nInstruction:\n\nWith
      the input and the inference results, the AI assistant needs to describe the
      process and results. The previous stages can be formed as - User Input: {{ User
      Input }}, Task Planning: {{ Tasks }}, Model Selection: {{ Model Assignment }},
      Task Execution: {{ Predictions }}. You must first answer the user''s request
      in a straightforward manner. Then describe the task process and show your analysis
      and model inference results to the user in the first person. If inference results
      contain a file path, must tell the user the complete file path.", "role": "system"},
      {"content": "What is Task Decomposition?", "role": "user"}], "model": "gpt-3.5-turbo",
      "n": 1, "stream": false, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '2913'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.48.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.48.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//dFJNbxMxEL3nV4x8TqL0K2lzQ0UIcagQCgiBUOTdnV0P8c4snlloVfW/
        IztpEg5cfHjP7/nN8zxPABw1bg2uDt7qfoizN/dLenebwsPyicav1ceH9/WSyX/59OHb51s3zQqp
        fmJtr6p5Lf0Q0Uh4T9cJvWF2vVhdrq6v7y4WV4XopcGYZd1gs6v5zczGVMlscXF5c1AGoRrVreH7
        BADguZw5Izf46NawmL4iPar6Dt36eAnAJYkZcV6V1Dybm57IWtiQS+yN1x00mIOLUk4OpODBsA5M
        v0aEUbEBE6gS+h008odhP+YjmNedArEJaO9jxASeG1DKdAI1HHQOm0AKQ5IaVSFgHBR8h2wKkqAU
        oRA8NxGhobaleox2sK6eoKHf1BB3YAH7/Vu9JITes+/QVxFBx6pcn8NbaltMyAY9WpBGIdIO4T54
        YpAWNkHGLlhJuUmIZ5iCT6dhXxvB8xn7MRoN+cE82BSQg+c6ZxswtZJ6zzUWb7+PTJxTZzGmIaH5
        0q+0BbVAvCvifTXz8x9K2I7q84bwGOMBfzl+eZRuSFLpgT/iLTFp2Cb0Kpy/V00GV9iXCcCPslrj
        P9vihiT9YFuTHXI2vFnd7f3caZtP7HJ1IE3MxzP8evk/1bZB8xT1bEHdPiFxd3JYHGOWOZ0+qWG/
        bYm73B6VfS1tvEz+AgAA//8DAPNP72quAwAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8c9c5a011a504cf4-BOS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Sep 2024 14:58:24 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=svG8xpfYNf8HqPokXq6.JTTlLsab.I6GhP0EMlMZWgw-1727449104-1.0.1.1-yp19_wwwbmkCHd5levnTVG3Zg.GUBsKC8J2naKZZXuKRyeDpatIb9ex0HD4wSiBhda9N1O0nRFGYVUMkLui3Dw;
        path=/; expires=Fri, 27-Sep-24 15:28:24 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=FRhBnfl0B.OPjXlwpuqkQuVfmulpO0tJQjBRXFSbRTU-1727449104892-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      openai-organization:
      - user-wzxwdcuddhvwm09z43ibeucf
      openai-processing-ms:
      - '1251'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '5000'
      x-ratelimit-limit-tokens:
      - '4000000'
      x-ratelimit-remaining-requests:
      - '4999'
      x-ratelimit-remaining-tokens:
      - '3999302'
      x-ratelimit-reset-requests:
      - 12ms
      x-ratelimit-reset-tokens:
      - 10ms
      x-request-id:
      - req_6b052d9c7f33c5cc5f850a2c9c886e73
    status:
      code: 200
      message: OK
version: 1
