interactions:
- request:
    body: '{"input": [[3923, 374, 5546, 97478, 3571, 30]], "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '111'
      content-type:
      - application/json
      cookie:
      - __cf_bm=cOXiJt3ZhX.U8bFoK4IRnAyuukfzOuljTSL8Djv6RAU-1727447395-1.0.1.1-nIkPz3.kq2Kro4YDVASMK53qwkXJSHFWAahgsq25k3AEaJ3ca1lMg4435NfPXMCNK.0.lEkyt_Bv41KgEOpqIg;
        _cfuvid=tQiGoA94xaHAHCJPWqSaRbG4swZHYRF3d3SVkdW5i6k-1727447395171-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.48.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.48.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        3iAAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8c9c30733a7a9041-BOS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Sep 2024 14:30:01 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      openai-model:
      - text-embedding-ada-002
      openai-organization:
      - user-wzxwdcuddhvwm09z43ibeucf
      openai-processing-ms:
      - '25'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '5000'
      x-ratelimit-limit-tokens:
      - '5000000'
      x-ratelimit-remaining-requests:
      - '4999'
      x-ratelimit-remaining-tokens:
      - '4999993'
      x-ratelimit-reset-requests:
      - 12ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_cf193c6443484bd584e88f7cc87837cb
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are an assistant for question-answering
      tasks. Use the following pieces of retrieved context to answer the question.
      If you don''t know the answer, say that you don''t know. Use three sentences
      maximum and keep the answer concise.\n\nFig. 1. Overview of a LLM-powered autonomous
      agent system.\nComponent One: Planning#\nA complicated task usually involves
      many steps. An agent needs to know what they are and plan ahead.\nTask Decomposition#\nChain
      of thought (CoT; Wei et al. 2022) has become a standard prompting technique
      for enhancing model performance on complex tasks. The model is instructed to
      \u201cthink step by step\u201d to utilize more test-time computation to decompose
      hard tasks into smaller and simpler steps. CoT transforms big tasks into multiple
      manageable tasks and shed lights into an interpretation of the model\u2019s
      thinking process.\n\nTree of Thoughts (Yao et al. 2023) extends CoT by exploring
      multiple reasoning possibilities at each step. It first decomposes the problem
      into multiple thought steps and generates multiple thoughts per step, creating
      a tree structure. The search process can be BFS (breadth-first search) or DFS
      (depth-first search) with each state evaluated by a classifier (via a prompt)
      or majority vote.\nTask decomposition can be done (1) by LLM with simple prompting
      like \"Steps for XYZ.\\n1.\", \"What are the subgoals for achieving XYZ?\",
      (2) by using task-specific instructions; e.g. \"Write a story outline.\" for
      writing a novel, or (3) with human inputs.\n\nResources:\n1. Internet access
      for searches and information gathering.\n2. Long Term memory management.\n3.
      GPT-3.5 powered Agents for delegation of simple tasks.\n4. File output.\n\nPerformance
      Evaluation:\n1. Continuously review and analyze your actions to ensure you are
      performing to the best of your abilities.\n2. Constructively self-criticize
      your big-picture behavior constantly.\n3. Reflect on past decisions and strategies
      to refine your approach.\n4. Every command has a cost, so be smart and efficient.
      Aim to complete tasks in the least number of steps.\n\n(3) Task execution: Expert
      models execute on the specific tasks and log results.\nInstruction:\n\nWith
      the input and the inference results, the AI assistant needs to describe the
      process and results. The previous stages can be formed as - User Input: {{ User
      Input }}, Task Planning: {{ Tasks }}, Model Selection: {{ Model Assignment }},
      Task Execution: {{ Predictions }}. You must first answer the user''s request
      in a straightforward manner. Then describe the task process and show your analysis
      and model inference results to the user in the first person. If inference results
      contain a file path, must tell the user the complete file path.", "role": "system"},
      {"content": "What is Task Decomposition?", "role": "user"}], "model": "gpt-3.5-turbo",
      "n": 1, "stream": false, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '2913'
      content-type:
      - application/json
      cookie:
      - __cf_bm=leU1rnrd5Mk7Zbv8nf22ZmPrT0VrL1sEyGEWl3U1wFQ-1727447397-1.0.1.1-_2BIynft9V5Snkjj0VTPA9WUaBVOo9jSC2N.S6EUVGXe1WFQlbf2GV8XCts3aJQlM6UOlclKs_C23Kw7GtjR5A;
        _cfuvid=B7aDmti5xRKNceE.Zd020VfOM7Z5AVbpTiXyU9DlShM-1727447397769-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.48.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.48.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//dFLLihsxELz7KxqdErCN9+F14lswOBByWIIhbEIwGk171DsataLu2Sf7
        70Fjr72B5DIDVapWVaueRwCGarME47xV16Uw+bS6+hzX19+uf6Qv8/6rv+puZk836/XTh1v33YyL
        gqtbdPqqmjruUkAljnvaZbSKZerZ4nxxebm4nJ0NRMc1hiJrkk4upvOJ9rniyezsfH5QeiaHYpbw
        cwQA8Dx8i8dY44NZwmz8inQoYhs0y+MhAJM5FMRYERK1Uc34RDqOinGwvbHSQo3FOAsV50ACFhSd
        j/S7R+gFa1CGKqNtoeb7CPuYD6BWWgGKyiCdDQEz2FiDUKEziGKSKWx8mZhSZus8eAxJwDYYVYAz
        DJsQUOvagFDTbkeuD3qYXT1CTXdUU2xAPXb7yzrOCJ2NtkFbBQTpq+H4FP4Rx9kIFYJ1nvCuRPGZ
        +8ZDh+q5FgjUIqy8pQi8g40vpMK7FW/eF3+bjPiGkDHce3Iemp5qLJ72CYAiqKfYFqcleLE+/DkD
        PqTAuTBdH5RSQMhohWOBEotQRYGUUMAqYFlTkU7fvlnGXS+2dCb2IRzwl2MJAjcpcyUH/ojvKJL4
        7f668uCinMzAvowAfg1l6//qj0mZu6Rb5RZjGThffNzPM6d+n9jFxYFUVhtO+NX8/H+qbY1qKcib
        yprjQk4TZkebQ04jj6LYbXcUG8wp09DgYRsvoz8AAAD//wMAS6eBocADAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8c9c30745c4d8f69-BOS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Sep 2024 14:30:03 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      openai-organization:
      - user-wzxwdcuddhvwm09z43ibeucf
      openai-processing-ms:
      - '1481'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '5000'
      x-ratelimit-limit-tokens:
      - '4000000'
      x-ratelimit-remaining-requests:
      - '4999'
      x-ratelimit-remaining-tokens:
      - '3999302'
      x-ratelimit-reset-requests:
      - 12ms
      x-ratelimit-reset-tokens:
      - 10ms
      x-request-id:
      - req_92f8ca28cbb65b3090232964f1b69dcf
    status:
      code: 200
      message: OK
version: 1
