interactions:
- request:
    body: '{"messages": [{"content": "Given a chat history and the latest user question
      which might reference context in the chat history, formulate a standalone question
      which can be understood without the chat history. Do NOT answer the question,
      just reformulate it if needed and otherwise return it as is.", "role": "system"},
      {"content": "What is Task Decomposition?", "role": "user"}, {"content": "Task
      decomposition is a technique used to break down complex tasks into smaller and
      simpler steps. This approach helps agents or models tackle difficult tasks by
      dividing them into more manageable subtasks. Task decomposition can be achieved
      through methods like Chain of Thought (CoT) or Tree of Thoughts, which guide
      the model in thinking step by step or exploring multiple reasoning possibilities
      at each step.", "role": "assistant"}, {"content": "What are common ways of doing
      it?", "role": "user"}], "model": "gpt-3.5-turbo", "n": 1, "stream": false, "temperature":
      0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '968'
      content-type:
      - application/json
      cookie:
      - __cf_bm=leU1rnrd5Mk7Zbv8nf22ZmPrT0VrL1sEyGEWl3U1wFQ-1727447397-1.0.1.1-_2BIynft9V5Snkjj0VTPA9WUaBVOo9jSC2N.S6EUVGXe1WFQlbf2GV8XCts3aJQlM6UOlclKs_C23Kw7GtjR5A;
        _cfuvid=B7aDmti5xRKNceE.Zd020VfOM7Z5AVbpTiXyU9DlShM-1727447397769-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.48.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.48.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//dFBNa0IxELz7K5acVfwWvJRSaOmt9KBgKRLz1vdSk2ya3Vctxf9e8vzs
        oZc9zOwMM/PTAlC2UDNQptJifHSd+4fJU1ya/svXfLF73C93z3N5Hdvl927/SaqdFbT+QCNnVdeQ
        jw7FUjjSJqEWzK796WA6Gk1HvWFDeCrQZVkZpTPsjjtSpzV1ev3B+KSsyBpkNYO3FgDAT3NzxlDg
        Xs2g1z4jHpl1iWp2eQJQiVxGlGa2LDqIal9JQ0EwNLEXlRbQCYHJIxjyngJ4lIoKhpqxgA0lEM1b
        KDDXI7a5392tX8JNzTr3CbVzJ/xwCeiojInWfOIv+MYGy9UqoWYKOQwLRdWwhxbAezNE/aebiol8
        lJXQFkM27I8nRz913f6GPa2khES7G3zyr2pVoGjr+GZOdUxoQ3l16F1iNj0Vf7OgX21sKDHFZJt1
        mzUOrV8AAAD//wMA20sBblwCAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8c9c307f1a498f69-BOS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Sep 2024 14:30:03 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      openai-organization:
      - user-wzxwdcuddhvwm09z43ibeucf
      openai-processing-ms:
      - '279'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '5000'
      x-ratelimit-limit-tokens:
      - '4000000'
      x-ratelimit-remaining-requests:
      - '4999'
      x-ratelimit-remaining-tokens:
      - '3999794'
      x-ratelimit-reset-requests:
      - 12ms
      x-ratelimit-reset-tokens:
      - 3ms
      x-request-id:
      - req_d5cec59c2de9d774ba002b69a9811b35
    status:
      code: 200
      message: OK
- request:
    body: '{"input": [[3923, 527, 1063, 4279, 5528, 1511, 369, 3465, 66266, 30]],
      "model": "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '134'
      content-type:
      - application/json
      cookie:
      - __cf_bm=cOXiJt3ZhX.U8bFoK4IRnAyuukfzOuljTSL8Djv6RAU-1727447395-1.0.1.1-nIkPz3.kq2Kro4YDVASMK53qwkXJSHFWAahgsq25k3AEaJ3ca1lMg4435NfPXMCNK.0.lEkyt_Bv41KgEOpqIg;
        _cfuvid=tQiGoA94xaHAHCJPWqSaRbG4swZHYRF3d3SVkdW5i6k-1727447395171-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.48.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.48.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8c9c308258759041-BOS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Sep 2024 14:30:04 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      openai-model:
      - text-embedding-ada-002
      openai-organization:
      - user-wzxwdcuddhvwm09z43ibeucf
      openai-processing-ms:
      - '22'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '5000'
      x-ratelimit-limit-tokens:
      - '5000000'
      x-ratelimit-remaining-requests:
      - '4999'
      x-ratelimit-remaining-tokens:
      - '4999990'
      x-ratelimit-reset-requests:
      - 12ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_6fd3a60c25add0ed74e9b4ddaee5b180
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are an assistant for question-answering
      tasks. Use the following pieces of retrieved context to answer the question.
      If you don''t know the answer, say that you don''t know. Use three sentences
      maximum and keep the answer concise.\n\nTree of Thoughts (Yao et al. 2023) extends
      CoT by exploring multiple reasoning possibilities at each step. It first decomposes
      the problem into multiple thought steps and generates multiple thoughts per
      step, creating a tree structure. The search process can be BFS (breadth-first
      search) or DFS (depth-first search) with each state evaluated by a classifier
      (via a prompt) or majority vote.\nTask decomposition can be done (1) by LLM
      with simple prompting like \"Steps for XYZ.\\n1.\", \"What are the subgoals
      for achieving XYZ?\", (2) by using task-specific instructions; e.g. \"Write
      a story outline.\" for writing a novel, or (3) with human inputs.\n\nFig. 1.
      Overview of a LLM-powered autonomous agent system.\nComponent One: Planning#\nA
      complicated task usually involves many steps. An agent needs to know what they
      are and plan ahead.\nTask Decomposition#\nChain of thought (CoT; Wei et al.
      2022) has become a standard prompting technique for enhancing model performance
      on complex tasks. The model is instructed to \u201cthink step by step\u201d
      to utilize more test-time computation to decompose hard tasks into smaller and
      simpler steps. CoT transforms big tasks into multiple manageable tasks and shed
      lights into an interpretation of the model\u2019s thinking process.\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nFig.
      9. Comparison of MIPS algorithms, measured in recall@10. (Image source: Google
      Blog, 2020)\nCheck more MIPS algorithms and performance comparison in ann-benchmarks.com.\nComponent
      Three: Tool Use#\nTool use is a remarkable and distinguishing characteristic
      of human beings. We create, modify and utilize external objects to do things
      that go beyond our physical and cognitive limits. Equipping LLMs with external
      tools can significantly extend the model capabilities.", "role": "system"},
      {"content": "What is Task Decomposition?", "role": "user"}, {"content": "Task
      decomposition is a technique used to break down complex tasks into smaller and
      simpler steps. This approach helps agents or models tackle difficult tasks by
      dividing them into more manageable subtasks. Task decomposition can be achieved
      through methods like Chain of Thought (CoT) or Tree of Thoughts, which guide
      the model in thinking step by step or exploring multiple reasoning possibilities
      at each step.", "role": "assistant"}, {"content": "What are common ways of doing
      it?", "role": "user"}], "model": "gpt-3.5-turbo", "n": 1, "stream": false, "temperature":
      0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '3260'
      content-type:
      - application/json
      cookie:
      - __cf_bm=leU1rnrd5Mk7Zbv8nf22ZmPrT0VrL1sEyGEWl3U1wFQ-1727447397-1.0.1.1-_2BIynft9V5Snkjj0VTPA9WUaBVOo9jSC2N.S6EUVGXe1WFQlbf2GV8XCts3aJQlM6UOlclKs_C23Kw7GtjR5A;
        _cfuvid=B7aDmti5xRKNceE.Zd020VfOM7Z5AVbpTiXyU9DlShM-1727447397769-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.48.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.48.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//dFJNb1MxELznV6x8AimJkjZtpNwKUkEilUBFgkJQ5Pht3lvi5331rtuG
        qv8d2fkqBy4+zOyOZ3fnuQdgqDIzMK6x6trOD67eX364P8f553WaX3+8u3oa+fFtGn/68vCuuTb9
        3MGr3+j00DV03HYelTjsaBfRKmbV8fRsOplMJ6NJIVqu0Oe2utPB+fBioCmueDAan13sOxsmh2Jm
        8LMHAPBc3uwxVPhkZjDqH5AWRWyNZnYsAjCRfUaMFSFRG9T0T6TjoBiK7a9WNlBhNs5C2Tk4G2CF
        UHFAoACO25YDPNqtgCTXgBVIQqGGuQ11sjXCTZ4G3sznN2/hkbQBobwH6CK3neZSTxuEhblV7ATW
        HOH73Y+FAY5gZZMLMiZpVbP1AspgXUP4gGBBrWyGkH0OpENHa3JAQTQml+1K8Wu9cDadBKv+7reI
        9wml/K4MC/MtkmY9UY5b4KSeAi5M+fkxUim0EPgB/RCuqqosw3q/7UOTWhuAQpdUDutJSp7+YJXF
        D/vDYlaAgjJIa73HCHKcGa0QRsAndCmLD1/fJOI6ic2ZCMn7Pf5yPLLnuou8kj1/xNcUSJplRCsc
        8kFFuTOFfekB/CphSv/kw+zOslTeYMiCl+eTnZ455ffETi/3pLJa/wofj/7XtaxQLXl5FUmzc0ih
        PimMjjbLnEa2otgu1xRqjF2kktCyjZfeXwAAAP//AwD9AlSioAMAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8c9c30851ab08f69-BOS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Sep 2024 14:30:05 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      openai-organization:
      - user-wzxwdcuddhvwm09z43ibeucf
      openai-processing-ms:
      - '1474'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '5000'
      x-ratelimit-limit-tokens:
      - '4000000'
      x-ratelimit-remaining-requests:
      - '4999'
      x-ratelimit-remaining-tokens:
      - '3999231'
      x-ratelimit-reset-requests:
      - 12ms
      x-ratelimit-reset-tokens:
      - 11ms
      x-request-id:
      - req_baeeed1ff5766f56d71904fec700f452
    status:
      code: 200
      message: OK
version: 1
