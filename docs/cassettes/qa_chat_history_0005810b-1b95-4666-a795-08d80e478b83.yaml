interactions:
- request:
    body: '{"input": [[3923, 374, 5546, 97478, 3571, 30]], "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '111'
      content-type:
      - application/json
      cookie:
      - __cf_bm=cOXiJt3ZhX.U8bFoK4IRnAyuukfzOuljTSL8Djv6RAU-1727447395-1.0.1.1-nIkPz3.kq2Kro4YDVASMK53qwkXJSHFWAahgsq25k3AEaJ3ca1lMg4435NfPXMCNK.0.lEkyt_Bv41KgEOpqIg;
        _cfuvid=tQiGoA94xaHAHCJPWqSaRbG4swZHYRF3d3SVkdW5i6k-1727447395171-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.48.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.48.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        n9P/+t7ov/71vwAAAP//AwB+tp2G3iAAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8c9c305ccd999041-BOS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Sep 2024 14:29:58 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      openai-model:
      - text-embedding-ada-002
      openai-organization:
      - user-wzxwdcuddhvwm09z43ibeucf
      openai-processing-ms:
      - '19'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '5000'
      x-ratelimit-limit-tokens:
      - '5000000'
      x-ratelimit-remaining-requests:
      - '4999'
      x-ratelimit-remaining-tokens:
      - '4999993'
      x-ratelimit-reset-requests:
      - 12ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_9b952d4b4086e12f7538baf4a290eeef
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are an assistant for question-answering
      tasks. Use the following pieces of retrieved context to answer the question.
      If you don''t know the answer, say that you don''t know. Use three sentences
      maximum and keep the answer concise.\n\nFig. 1. Overview of a LLM-powered autonomous
      agent system.\nComponent One: Planning#\nA complicated task usually involves
      many steps. An agent needs to know what they are and plan ahead.\nTask Decomposition#\nChain
      of thought (CoT; Wei et al. 2022) has become a standard prompting technique
      for enhancing model performance on complex tasks. The model is instructed to
      \u201cthink step by step\u201d to utilize more test-time computation to decompose
      hard tasks into smaller and simpler steps. CoT transforms big tasks into multiple
      manageable tasks and shed lights into an interpretation of the model\u2019s
      thinking process.\n\nTree of Thoughts (Yao et al. 2023) extends CoT by exploring
      multiple reasoning possibilities at each step. It first decomposes the problem
      into multiple thought steps and generates multiple thoughts per step, creating
      a tree structure. The search process can be BFS (breadth-first search) or DFS
      (depth-first search) with each state evaluated by a classifier (via a prompt)
      or majority vote.\nTask decomposition can be done (1) by LLM with simple prompting
      like \"Steps for XYZ.\\n1.\", \"What are the subgoals for achieving XYZ?\",
      (2) by using task-specific instructions; e.g. \"Write a story outline.\" for
      writing a novel, or (3) with human inputs.\n\nResources:\n1. Internet access
      for searches and information gathering.\n2. Long Term memory management.\n3.
      GPT-3.5 powered Agents for delegation of simple tasks.\n4. File output.\n\nPerformance
      Evaluation:\n1. Continuously review and analyze your actions to ensure you are
      performing to the best of your abilities.\n2. Constructively self-criticize
      your big-picture behavior constantly.\n3. Reflect on past decisions and strategies
      to refine your approach.\n4. Every command has a cost, so be smart and efficient.
      Aim to complete tasks in the least number of steps.\n\n(3) Task execution: Expert
      models execute on the specific tasks and log results.\nInstruction:\n\nWith
      the input and the inference results, the AI assistant needs to describe the
      process and results. The previous stages can be formed as - User Input: {{ User
      Input }}, Task Planning: {{ Tasks }}, Model Selection: {{ Model Assignment }},
      Task Execution: {{ Predictions }}. You must first answer the user''s request
      in a straightforward manner. Then describe the task process and show your analysis
      and model inference results to the user in the first person. If inference results
      contain a file path, must tell the user the complete file path.", "role": "system"},
      {"content": "What is Task Decomposition?", "role": "user"}], "model": "gpt-3.5-turbo",
      "n": 1, "stream": false, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '2913'
      content-type:
      - application/json
      cookie:
      - __cf_bm=leU1rnrd5Mk7Zbv8nf22ZmPrT0VrL1sEyGEWl3U1wFQ-1727447397-1.0.1.1-_2BIynft9V5Snkjj0VTPA9WUaBVOo9jSC2N.S6EUVGXe1WFQlbf2GV8XCts3aJQlM6UOlclKs_C23Kw7GtjR5A;
        _cfuvid=B7aDmti5xRKNceE.Zd020VfOM7Z5AVbpTiXyU9DlShM-1727447397769-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.48.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.48.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//dJJBb9swDIXv+RWEThuQBEnTNGtuRQ/FDsMGLMMOQxHIMm1plkhNlNMU
        Rf/7ICdNsmG7+MDnR398fi8jAOVqtQZlrM4mRD+5u7956L7un/a3H5/n3z99CXdtG6rPy0XPD9/U
        uDi4+okmv7mmhkP0mB3TQTYJdcaydb66Wl1frxa3HwYhcI2+2NqYJ4vpcpL7VPFkNr9aHp2WnUFR
        a/gxAgB4GZ6FkWrcqzXMxm+TgCK6RbU+vQSgEvsyUVrESdaU1fgsGqaMNGBvtHRQYwFncYUcHO3Y
        71CgSqg7Ry3U/ERwuG0PWUsn4CgzSNDeYwJNNYgrcgLJGAUyQ9AdQrYYIHBCCJp0i7ryCA0XC+gW
        KQMnGMKYwgaNJferRwHvOoR7qx0BN7Cx3Lc2w7t73rwfPrZJiBeKgEUfwdH5EmrB6lRf0obeZxc9
        nrAH1DEgWU2mOAYQiJgaTkGTQeC/7p7CPwIzmqBC0MY63GEN2aaCdYwEYuIQs6N2POyYSETjGmfA
        keTUm7JDxiUI2wdd8o99lunlD0vY9KJLYaj3/jh/PTXAcxsTV3LUT/PGkRO7TaiFqfxtyRzVoL6O
        AB6HpvV/lEcdaLeZO6SycLm6PexT53Kf1dX8KGbO2p/nN8vZ/1zbGrN2Xi76qg6EjtrzhtkJc7hT
        ybNkDNvGUYspJjfUd0jjdfQbAAD//wMAulNEtL0DAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8c9c305e58e58f69-BOS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Sep 2024 14:29:59 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      openai-organization:
      - user-wzxwdcuddhvwm09z43ibeucf
      openai-processing-ms:
      - '965'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '5000'
      x-ratelimit-limit-tokens:
      - '4000000'
      x-ratelimit-remaining-requests:
      - '4999'
      x-ratelimit-remaining-tokens:
      - '3999302'
      x-ratelimit-reset-requests:
      - 12ms
      x-ratelimit-reset-tokens:
      - 10ms
      x-request-id:
      - req_7d52cdff707009098aae771e7bf04bb7
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Given a chat history and the latest user question
      which might reference context in the chat history, formulate a standalone question
      which can be understood without the chat history. Do NOT answer the question,
      just reformulate it if needed and otherwise return it as is.", "role": "system"},
      {"content": "What is Task Decomposition?", "role": "user"}, {"content": "Task
      decomposition involves breaking down complex tasks into smaller and simpler
      steps to make them more manageable for an agent or model. Techniques like Chain
      of Thought (CoT) and Tree of Thoughts help in decomposing hard tasks into multiple
      smaller steps, enhancing model performance on complex tasks. Task decomposition
      can be achieved through simple prompting, task-specific instructions, or human
      inputs.", "role": "assistant"}, {"content": "What are common ways of doing it?",
      "role": "user"}], "model": "gpt-3.5-turbo", "n": 1, "stream": false, "temperature":
      0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '965'
      content-type:
      - application/json
      cookie:
      - __cf_bm=leU1rnrd5Mk7Zbv8nf22ZmPrT0VrL1sEyGEWl3U1wFQ-1727447397-1.0.1.1-_2BIynft9V5Snkjj0VTPA9WUaBVOo9jSC2N.S6EUVGXe1WFQlbf2GV8XCts3aJQlM6UOlclKs_C23Kw7GtjR5A;
        _cfuvid=B7aDmti5xRKNceE.Zd020VfOM7Z5AVbpTiXyU9DlShM-1727447397769-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.48.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.48.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//dJBPa0IxEMTvfoolZxX/W70UsWBvvQhFSpGYt76XmmRDdsW24ncveVq1
        h15y2F9mmJljA0DZQk1BmUqL8dG1ZvPRwpmnh83SHF5Wq7hcMH4n/Wxm88NANbOCNh9o5FfVNuSj
        Q7EUztgk1ILZtTvujQeDcX8yqYGnAl2WlVFa/fawJfu0oVan2xtelBVZg6ym8NYAADjWb84YCvxU
        U+g0fy8emXWJanr9BKASuXxRmtmy6CCqeYOGgmCoY79WWkAnBCaPYMh7CuBRKioYtpRANO+gwNyM
        2OZqj/dWCbd71rlK2Dt3uZ+u2RyVMdGGL/x639pguVon1Ewh52ChqGp6agC81xvs/9RSMZGPshba
        YciG3eHg7Kdus9/o5MKERLs70aj/n2hdoGjr+G5IdQ5oQ3lz6FxT1jUVf7GgX29tKDHFZOtd6zFO
        jR8AAAD//wMAVU8r7VYCAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8c9c30663abf8f69-BOS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Sep 2024 14:29:59 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      openai-organization:
      - user-wzxwdcuddhvwm09z43ibeucf
      openai-processing-ms:
      - '262'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '5000'
      x-ratelimit-limit-tokens:
      - '4000000'
      x-ratelimit-remaining-requests:
      - '4999'
      x-ratelimit-remaining-tokens:
      - '3999793'
      x-ratelimit-reset-requests:
      - 12ms
      x-ratelimit-reset-tokens:
      - 3ms
      x-request-id:
      - req_704aecfe632ee17734dd6f9ee18b170a
    status:
      code: 200
      message: OK
- request:
    body: '{"input": [[3923, 527, 1063, 4279, 5528, 369, 3465, 66266, 30]], "model":
      "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '128'
      content-type:
      - application/json
      cookie:
      - __cf_bm=cOXiJt3ZhX.U8bFoK4IRnAyuukfzOuljTSL8Djv6RAU-1727447395-1.0.1.1-nIkPz3.kq2Kro4YDVASMK53qwkXJSHFWAahgsq25k3AEaJ3ca1lMg4435NfPXMCNK.0.lEkyt_Bv41KgEOpqIg;
        _cfuvid=tQiGoA94xaHAHCJPWqSaRbG4swZHYRF3d3SVkdW5i6k-1727447395171-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.48.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.48.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8c9c30696e209041-BOS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Sep 2024 14:30:00 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      openai-model:
      - text-embedding-ada-002
      openai-organization:
      - user-wzxwdcuddhvwm09z43ibeucf
      openai-processing-ms:
      - '30'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '5000'
      x-ratelimit-limit-tokens:
      - '5000000'
      x-ratelimit-remaining-requests:
      - '4999'
      x-ratelimit-remaining-tokens:
      - '4999991'
      x-ratelimit-reset-requests:
      - 12ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_00d61f9a31d72bb4a289511b7eab4b5e
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are an assistant for question-answering
      tasks. Use the following pieces of retrieved context to answer the question.
      If you don''t know the answer, say that you don''t know. Use three sentences
      maximum and keep the answer concise.\n\nTree of Thoughts (Yao et al. 2023) extends
      CoT by exploring multiple reasoning possibilities at each step. It first decomposes
      the problem into multiple thought steps and generates multiple thoughts per
      step, creating a tree structure. The search process can be BFS (breadth-first
      search) or DFS (depth-first search) with each state evaluated by a classifier
      (via a prompt) or majority vote.\nTask decomposition can be done (1) by LLM
      with simple prompting like \"Steps for XYZ.\\n1.\", \"What are the subgoals
      for achieving XYZ?\", (2) by using task-specific instructions; e.g. \"Write
      a story outline.\" for writing a novel, or (3) with human inputs.\n\nFig. 1.
      Overview of a LLM-powered autonomous agent system.\nComponent One: Planning#\nA
      complicated task usually involves many steps. An agent needs to know what they
      are and plan ahead.\nTask Decomposition#\nChain of thought (CoT; Wei et al.
      2022) has become a standard prompting technique for enhancing model performance
      on complex tasks. The model is instructed to \u201cthink step by step\u201d
      to utilize more test-time computation to decompose hard tasks into smaller and
      simpler steps. CoT transforms big tasks into multiple manageable tasks and shed
      lights into an interpretation of the model\u2019s thinking process.\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nFig.
      11. Illustration of how HuggingGPT works. (Image source: Shen et al. 2023)\nThe
      system comprises of 4 stages:\n(1) Task planning: LLM works as the brain and
      parses the user requests into multiple tasks. There are four attributes associated
      with each task: task type, ID, dependencies, and arguments. They use few-shot
      examples to guide LLM to do task parsing and planning.\nInstruction:", "role":
      "system"}, {"content": "What is Task Decomposition?", "role": "user"}, {"content":
      "Task decomposition involves breaking down complex tasks into smaller and simpler
      steps to make them more manageable for an agent or model. Techniques like Chain
      of Thought (CoT) and Tree of Thoughts help in decomposing hard tasks into multiple
      smaller steps, enhancing model performance on complex tasks. Task decomposition
      can be achieved through simple prompting, task-specific instructions, or human
      inputs.", "role": "assistant"}, {"content": "What are common ways of doing it?",
      "role": "user"}], "model": "gpt-3.5-turbo", "n": 1, "stream": false, "temperature":
      0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '3176'
      content-type:
      - application/json
      cookie:
      - __cf_bm=leU1rnrd5Mk7Zbv8nf22ZmPrT0VrL1sEyGEWl3U1wFQ-1727447397-1.0.1.1-_2BIynft9V5Snkjj0VTPA9WUaBVOo9jSC2N.S6EUVGXe1WFQlbf2GV8XCts3aJQlM6UOlclKs_C23Kw7GtjR5A;
        _cfuvid=B7aDmti5xRKNceE.Zd020VfOM7Z5AVbpTiXyU9DlShM-1727447397769-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.48.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.48.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA3RSTW8aMRC98ytGPrUSIEhIULlFUdVLoh7aKk1LhWa9w66L17PyjENIlP9e2RBI
        VfXiw3vz8fzmPQ8AjKvNAoxtUW3X+9HV9eWnztnt2dX19E7X1bcnqu4/tjq7/EzeDHMHV7/J6mvX
        2HLXe1LHYU/bSKiUp07nZ/PZbD6bTArRcU0+tzW9js7HFyNNseLRZHp2cehs2VkSs4CfAwCA5/Jm
        jaGmR7OAMqcgHYlgQ2ZxLAIwkX1GDIo4UQxqhifSclAKRfZXlA3UlIWzuKwcLAaoCGoOBC6A5a7j
        AFvcCUiyLaBAEhcauMHQJGwIbvNv4N3Nze172DptQVz2AfrIXa+51LsNwdJ8UeoF1hzh+/2PpQGO
        gLLJBRmTVDWMXkAZ0LaOHggQpCfr1s6ComzGkAWPjpgLojHZrFuKcPTCWX0Sqof7tYcNyrA0d9Fp
        Gaocd8BJvQu0NGX9NrqiFSHwA/kxXNV1cQS93w2hTR0GcKFPKq8eJXXePVFd+vVfK5WhioQbqHlb
        nOw9PZZCAReUoeNI0GHAhrDyBJINGr+9VaR1EsxZCcn7A/5yPL7npo9cyYE/4msXnLSrSCgc8qFF
        uTeFfRkA/CohS3/lxuzPtVLeUMgDL8+n+3nmlOsTO/9wIJUV/Rt8Ovlf16omReflTVTNXqELzWnC
        5Ciz/NPITpS61dqFhmIfXUluceNl8AcAAP//AwCnB/rHuAMAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8c9c306a88048f69-BOS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Sep 2024 14:30:01 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      openai-organization:
      - user-wzxwdcuddhvwm09z43ibeucf
      openai-processing-ms:
      - '1087'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '5000'
      x-ratelimit-limit-tokens:
      - '4000000'
      x-ratelimit-remaining-requests:
      - '4999'
      x-ratelimit-remaining-tokens:
      - '3999252'
      x-ratelimit-reset-requests:
      - 12ms
      x-ratelimit-reset-tokens:
      - 11ms
      x-request-id:
      - req_dee4024a0ddf89effff51f53af3a9516
    status:
      code: 200
      message: OK
version: 1
