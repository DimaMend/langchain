interactions:
- request:
    body: '{"input": [[3923, 374, 5546, 97478, 3571, 30]], "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '111'
      content-type:
      - application/json
      cookie:
      - __cf_bm=VfEiWL8lVjWDJ1eYYOi41T46H54QmaeZKam3keUKU8Y-1727449089-1.0.1.1-RKntjzRCcHu9Mqp_E4kPBhvAI4uXxVtq.F7.1g6AhkOTdaLeADzeqv_utJ.0mo8mN._ZdF5bpjA.oMZNgSmYMg;
        _cfuvid=UwB1KnBNeptIb7UOULQlELR2aOjMHWHKYazoDYURRcw-1727449089799-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.48.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.48.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        3iAAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8c9c59c5eb734ce3-BOS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Sep 2024 14:58:14 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      openai-model:
      - text-embedding-ada-002
      openai-organization:
      - user-wzxwdcuddhvwm09z43ibeucf
      openai-processing-ms:
      - '20'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '5000'
      x-ratelimit-limit-tokens:
      - '5000000'
      x-ratelimit-remaining-requests:
      - '4999'
      x-ratelimit-remaining-tokens:
      - '4999993'
      x-ratelimit-reset-requests:
      - 12ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_434b1b4ed491ef61513466412c21c84c
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are an assistant for question-answering
      tasks. Use the following pieces of retrieved context to answer the question.
      If you don''t know the answer, say that you don''t know. Use three sentences
      maximum and keep the answer concise.\n\nFig. 1. Overview of a LLM-powered autonomous
      agent system.\nComponent One: Planning#\nA complicated task usually involves
      many steps. An agent needs to know what they are and plan ahead.\nTask Decomposition#\nChain
      of thought (CoT; Wei et al. 2022) has become a standard prompting technique
      for enhancing model performance on complex tasks. The model is instructed to
      \u201cthink step by step\u201d to utilize more test-time computation to decompose
      hard tasks into smaller and simpler steps. CoT transforms big tasks into multiple
      manageable tasks and shed lights into an interpretation of the model\u2019s
      thinking process.\n\nTree of Thoughts (Yao et al. 2023) extends CoT by exploring
      multiple reasoning possibilities at each step. It first decomposes the problem
      into multiple thought steps and generates multiple thoughts per step, creating
      a tree structure. The search process can be BFS (breadth-first search) or DFS
      (depth-first search) with each state evaluated by a classifier (via a prompt)
      or majority vote.\nTask decomposition can be done (1) by LLM with simple prompting
      like \"Steps for XYZ.\\n1.\", \"What are the subgoals for achieving XYZ?\",
      (2) by using task-specific instructions; e.g. \"Write a story outline.\" for
      writing a novel, or (3) with human inputs.\n\nResources:\n1. Internet access
      for searches and information gathering.\n2. Long Term memory management.\n3.
      GPT-3.5 powered Agents for delegation of simple tasks.\n4. File output.\n\nPerformance
      Evaluation:\n1. Continuously review and analyze your actions to ensure you are
      performing to the best of your abilities.\n2. Constructively self-criticize
      your big-picture behavior constantly.\n3. Reflect on past decisions and strategies
      to refine your approach.\n4. Every command has a cost, so be smart and efficient.
      Aim to complete tasks in the least number of steps.\n\n(3) Task execution: Expert
      models execute on the specific tasks and log results.\nInstruction:\n\nWith
      the input and the inference results, the AI assistant needs to describe the
      process and results. The previous stages can be formed as - User Input: {{ User
      Input }}, Task Planning: {{ Tasks }}, Model Selection: {{ Model Assignment }},
      Task Execution: {{ Predictions }}. You must first answer the user''s request
      in a straightforward manner. Then describe the task process and show your analysis
      and model inference results to the user in the first person. If inference results
      contain a file path, must tell the user the complete file path.", "role": "system"},
      {"content": "What is Task Decomposition?", "role": "user"}], "model": "gpt-3.5-turbo",
      "n": 1, "stream": false, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '2913'
      content-type:
      - application/json
      cookie:
      - __cf_bm=7LquqTwFy9BQq57W1c5I.wU5NwfZwUcplc3QqnnmI1c-1727449093-1.0.1.1-sNVx5oEwffvbSIbZ4_6FnFzbDNZSYM67VLAcsn9HioqTVF4LPuWefKMHYruYY9iOJpYmCth5MllBIf1UkNpqJw;
        _cfuvid=lsTAvzmFn.L_wigWK6RJysxROIwzFjlrgXoZv_VsmSY-1727449093898-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.48.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.48.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//dJJPb9swDMXv+RSEzkmQZE2y5DZ0h23HIRiGDUMg24zFWhY1ke5aFP3u
        g5S/BbaLDfDpUT9S72UEYKgxWzC1s1r30U8+3K9o9eN982w3X1efvstDmi+WXz5/bHff0JlxdnD1
        gLWeXdOa++hRicNRrhNaxdx1vl6s7+42s81dEXpu0GdbG3Xybrqc6JAqnszmi+XJ6ZhqFLOFnyMA
        gJfyzYyhwSezhdn4XOlRxLZotpdDACaxzxVjRUjUBjXjq1hzUAwFe2elgwYzOAtlcqDwyP4RBaqE
        tqPQQsN/AhxnewK10glQUAbprfeYwIYGhLKcQBSjgDL0tkNQhz30nBB6G2yLtvI4hR3WLtDvAQU8
        dQj3zlIAPsDO8dA6LQ13CfGmJuDQR7AtBpULMYKzqbll6gevFP3thSe5egYKommoNQ9VnqCQqqPQ
        FfB8pvw5AT5FX8DPDRNa4ZCtkUWoIk9KKGAV0NauGKfwj4XWNkCF0HBAGCQ3OC4LYuI+ZphxQZxI
        xJoOVF85Ocg4w7iht/ll4qAyvX3KhIdBbI5SGLw/1V8v2fDcxsSVnPRL/UCBxO2PI+UciHI0RX0d
        AfwqGRzexMocaffKHYbccLneHPuZa+yv6npxEpXV+mt9tZz/z7VvUC15uUmyuSz92mF2wSxzGnkW
        xX5/oNBiiolKsMs2Xkd/AQAA//8DABiO3HPXAwAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8c9c59c74d238f6a-BOS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Sep 2024 14:58:15 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      openai-organization:
      - user-wzxwdcuddhvwm09z43ibeucf
      openai-processing-ms:
      - '907'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '5000'
      x-ratelimit-limit-tokens:
      - '4000000'
      x-ratelimit-remaining-requests:
      - '4999'
      x-ratelimit-remaining-tokens:
      - '3999302'
      x-ratelimit-reset-requests:
      - 12ms
      x-ratelimit-reset-tokens:
      - 10ms
      x-request-id:
      - req_00dd44972cbe658117185a4291efa7a9
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Given a chat history and the latest user question
      which might reference context in the chat history, formulate a standalone question
      which can be understood without the chat history. Do NOT answer the question,
      just reformulate it if needed and otherwise return it as is.", "role": "system"},
      {"content": "What is Task Decomposition?", "role": "user"}, {"content": "Task
      decomposition involves breaking down complex tasks into smaller and simpler
      steps to make them more manageable. Techniques like Chain of Thought and Tree
      of Thoughts help agents decompose hard tasks into multiple manageable tasks
      by instructing models to think step by step or explore multiple reasoning possibilities
      at each step. Task decomposition can be done using simple prompting, task-specific
      instructions, or human inputs.", "role": "assistant"}, {"content": "What are
      common ways of doing it?", "role": "user"}], "model": "gpt-3.5-turbo", "n":
      1, "stream": false, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '991'
      content-type:
      - application/json
      cookie:
      - __cf_bm=7LquqTwFy9BQq57W1c5I.wU5NwfZwUcplc3QqnnmI1c-1727449093-1.0.1.1-sNVx5oEwffvbSIbZ4_6FnFzbDNZSYM67VLAcsn9HioqTVF4LPuWefKMHYruYY9iOJpYmCth5MllBIf1UkNpqJw;
        _cfuvid=lsTAvzmFn.L_wigWK6RJysxROIwzFjlrgXoZv_VsmSY-1727449093898-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.48.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.48.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//dFDLTgJBELzzFZ05AwFkIXIx6sloYpREDsaQYbd3d2BmejPdKxLCv5tZ
        locHL32o6qpU1b4DoEymZqDSUkvqKtu7f5yY6ZYXi/nD60uxXm2fzfduvn5/Wr99bFU3Kmi1xlRO
        qn5KrrIohvyRTgNqweg6nI6m4/Ht4DZpCEcZ2igrKund9JOe1GFFvcFwlLTKkkyKrGbw2QEA2Dc3
        ZvQZ/qgZDLonxCGzLlDNzk8AKpCNiNLMhkV7Ud0LmZIX9E3sRakFdEBgcggpOUceHEpJGUPNmEFO
        AUTzBjKM9YhN7Hd37Rcwr1nHPr62tsUP54CWiirQilv+jOfGGy6XATWTj2FYqFINe+gAfDVD1H+6
        qSqQq2QptEEfDYdJcvRTl+2v2HYlJSTaXuGTf1XLDEUby1dzqmNC44uLw+Acs+mpeMeCbpkbX2Co
        gmnWbdY4dH4BAAD//wMAMu55u1wCAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8c9c59cead8f8f6a-BOS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Sep 2024 14:58:15 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      openai-organization:
      - user-wzxwdcuddhvwm09z43ibeucf
      openai-processing-ms:
      - '183'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '5000'
      x-ratelimit-limit-tokens:
      - '4000000'
      x-ratelimit-remaining-requests:
      - '4999'
      x-ratelimit-remaining-tokens:
      - '3999788'
      x-ratelimit-reset-requests:
      - 12ms
      x-ratelimit-reset-tokens:
      - 3ms
      x-request-id:
      - req_b737b40a46273447ec42b856645f4ffb
    status:
      code: 200
      message: OK
- request:
    body: '{"input": [[3923, 527, 1063, 4279, 5528, 1511, 369, 3465, 66266, 30]],
      "model": "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '134'
      content-type:
      - application/json
      cookie:
      - __cf_bm=VfEiWL8lVjWDJ1eYYOi41T46H54QmaeZKam3keUKU8Y-1727449089-1.0.1.1-RKntjzRCcHu9Mqp_E4kPBhvAI4uXxVtq.F7.1g6AhkOTdaLeADzeqv_utJ.0mo8mN._ZdF5bpjA.oMZNgSmYMg;
        _cfuvid=UwB1KnBNeptIb7UOULQlELR2aOjMHWHKYazoDYURRcw-1727449089799-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.48.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.48.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8c9c59d14a7e4ce3-BOS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Sep 2024 14:58:15 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      openai-model:
      - text-embedding-ada-002
      openai-organization:
      - user-wzxwdcuddhvwm09z43ibeucf
      openai-processing-ms:
      - '18'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '5000'
      x-ratelimit-limit-tokens:
      - '5000000'
      x-ratelimit-remaining-requests:
      - '4999'
      x-ratelimit-remaining-tokens:
      - '4999989'
      x-ratelimit-reset-requests:
      - 12ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_cb85ba728e1cce9e82b9ef1d2eaae9b6
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are an assistant for question-answering
      tasks. Use the following pieces of retrieved context to answer the question.
      If you don''t know the answer, say that you don''t know. Use three sentences
      maximum and keep the answer concise.\n\nTree of Thoughts (Yao et al. 2023) extends
      CoT by exploring multiple reasoning possibilities at each step. It first decomposes
      the problem into multiple thought steps and generates multiple thoughts per
      step, creating a tree structure. The search process can be BFS (breadth-first
      search) or DFS (depth-first search) with each state evaluated by a classifier
      (via a prompt) or majority vote.\nTask decomposition can be done (1) by LLM
      with simple prompting like \"Steps for XYZ.\\n1.\", \"What are the subgoals
      for achieving XYZ?\", (2) by using task-specific instructions; e.g. \"Write
      a story outline.\" for writing a novel, or (3) with human inputs.\n\nFig. 1.
      Overview of a LLM-powered autonomous agent system.\nComponent One: Planning#\nA
      complicated task usually involves many steps. An agent needs to know what they
      are and plan ahead.\nTask Decomposition#\nChain of thought (CoT; Wei et al.
      2022) has become a standard prompting technique for enhancing model performance
      on complex tasks. The model is instructed to \u201cthink step by step\u201d
      to utilize more test-time computation to decompose hard tasks into smaller and
      simpler steps. CoT transforms big tasks into multiple manageable tasks and shed
      lights into an interpretation of the model\u2019s thinking process.\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nFig.
      9. Comparison of MIPS algorithms, measured in recall@10. (Image source: Google
      Blog, 2020)\nCheck more MIPS algorithms and performance comparison in ann-benchmarks.com.\nComponent
      Three: Tool Use#\nTool use is a remarkable and distinguishing characteristic
      of human beings. We create, modify and utilize external objects to do things
      that go beyond our physical and cognitive limits. Equipping LLMs with external
      tools can significantly extend the model capabilities.", "role": "system"},
      {"content": "What is Task Decomposition?", "role": "user"}, {"content": "Task
      decomposition involves breaking down complex tasks into smaller and simpler
      steps to make them more manageable. Techniques like Chain of Thought and Tree
      of Thoughts help agents decompose hard tasks into multiple manageable tasks
      by instructing models to think step by step or explore multiple reasoning possibilities
      at each step. Task decomposition can be done using simple prompting, task-specific
      instructions, or human inputs.", "role": "assistant"}, {"content": "What are
      common ways of doing it?", "role": "user"}], "model": "gpt-3.5-turbo", "n":
      1, "stream": false, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '3283'
      content-type:
      - application/json
      cookie:
      - __cf_bm=7LquqTwFy9BQq57W1c5I.wU5NwfZwUcplc3QqnnmI1c-1727449093-1.0.1.1-sNVx5oEwffvbSIbZ4_6FnFzbDNZSYM67VLAcsn9HioqTVF4LPuWefKMHYruYY9iOJpYmCth5MllBIf1UkNpqJw;
        _cfuvid=lsTAvzmFn.L_wigWK6RJysxROIwzFjlrgXoZv_VsmSY-1727449093898-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.48.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.48.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//dFJNjxoxDL3zK6ycWgkQ+8F+cKtQ90QPbZFaqVuhTMbDuGTibOwRoGr/
        e5XAAlXVy4zkl2e/Z7/fAwBDtZmBca1V10U/+jC/o4fmI31vPn8Ntn1i1ZS+LHbzl6fpwgwzg6tf
        6PSNNXbcRY9KHA6wS2gVc9er++v729vHyeNdATqu0WfaOuroZjwdaZ8qHk2urqdHZsvkUMwMfgwA
        AH6Xb9YYatyZGUyGb5UORewazez0CMAk9rlirAiJ2qBmeAYdB8VQZC+tbKDGLJyFsnJwNkCFUHNA
        6IXCGhRdG+ilRwFPG4R5aykAN7BsuV+3Cu/mvHwPnGCZEC8AGcK2JdcCBdHUO4ViXEAZtKWwAVGM
        UO0Pf06Au+g5IXS9V4oeIaEVDllFZBGqyJMSClgFtK4txDHMues4wNbuJY/Xf11RcL6v3xwJ5UNB
        TNxFzYUtaQuLxadh4Y4koqOG3Ek4cTiafzbfEimCBVFOe+BePQUcPpusn4LjFDnZ0rXtO5tHx16L
        5yqh3UDN2wCHqOzKOAEKyiCd9R4T2FAfBaZiT8aXx0vY9GJzeELv/bH+ekqD53VMXMkRP9UbCiTt
        6rDOfHlRjqagrwOAnyV1/V9BMof1rJQ3GHLDu5ubQz9zDvoZvZ8eQWW1/qI+efgfa1WjWvJykV1z
        Ovi5w+Qks/g0shfFbtVQWGOKiUqUyzZeB38AAAD//wMAvrnEI8kDAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8c9c59d2292f8f6a-BOS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Sep 2024 14:58:17 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      openai-organization:
      - user-wzxwdcuddhvwm09z43ibeucf
      openai-processing-ms:
      - '1002'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '5000'
      x-ratelimit-limit-tokens:
      - '4000000'
      x-ratelimit-remaining-requests:
      - '4999'
      x-ratelimit-remaining-tokens:
      - '3999225'
      x-ratelimit-reset-requests:
      - 12ms
      x-ratelimit-reset-tokens:
      - 11ms
      x-request-id:
      - req_a5236127b3dee52e343ae5c4969567a6
    status:
      code: 200
      message: OK
version: 1
