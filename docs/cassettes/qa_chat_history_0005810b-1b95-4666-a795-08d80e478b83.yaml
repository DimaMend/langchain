interactions:
- request:
    body: '{"input": [[3923, 374, 5546, 97478, 3571, 30]], "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '111'
      content-type:
      - application/json
      cookie:
      - __cf_bm=q.NdLkTmojVhx9B7wndssOOPg4VslYF6KuV5.QTZTNc-1727368394-1.0.1.1-l6xHMKBIRJXBCldEjtiYgh9eZu4EtVMbwaYHUCtZm1Lm80aOd5rX4FSkGtWnex2gL40ZbyZSBE6lMcXVLqi5Bw;
        _cfuvid=_xJWw7iWyB4vdtDkk8JT3jz105I23YBmKLZ5VQG26YE-1727368394495-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.48.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.48.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        3iAAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8c94a7a0ed778f81-BOS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 26 Sep 2024 16:33:17 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      openai-model:
      - text-embedding-ada-002
      openai-organization:
      - user-wzxwdcuddhvwm09z43ibeucf
      openai-processing-ms:
      - '24'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '5000'
      x-ratelimit-limit-tokens:
      - '5000000'
      x-ratelimit-remaining-requests:
      - '4999'
      x-ratelimit-remaining-tokens:
      - '4999993'
      x-ratelimit-reset-requests:
      - 12ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_7844f9d6bdacefa4aa4172ccc9b535bf
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are an assistant for question-answering
      tasks. Use the following pieces of retrieved context to answer the question.
      If you don''t know the answer, say that you don''t know. Use three sentences
      maximum and keep the answer concise.\n\nFig. 1. Overview of a LLM-powered autonomous
      agent system.\nComponent One: Planning#\nA complicated task usually involves
      many steps. An agent needs to know what they are and plan ahead.\nTask Decomposition#\nChain
      of thought (CoT; Wei et al. 2022) has become a standard prompting technique
      for enhancing model performance on complex tasks. The model is instructed to
      \u201cthink step by step\u201d to utilize more test-time computation to decompose
      hard tasks into smaller and simpler steps. CoT transforms big tasks into multiple
      manageable tasks and shed lights into an interpretation of the model\u2019s
      thinking process.\n\nTree of Thoughts (Yao et al. 2023) extends CoT by exploring
      multiple reasoning possibilities at each step. It first decomposes the problem
      into multiple thought steps and generates multiple thoughts per step, creating
      a tree structure. The search process can be BFS (breadth-first search) or DFS
      (depth-first search) with each state evaluated by a classifier (via a prompt)
      or majority vote.\nTask decomposition can be done (1) by LLM with simple prompting
      like \"Steps for XYZ.\\n1.\", \"What are the subgoals for achieving XYZ?\",
      (2) by using task-specific instructions; e.g. \"Write a story outline.\" for
      writing a novel, or (3) with human inputs.\n\nResources:\n1. Internet access
      for searches and information gathering.\n2. Long Term memory management.\n3.
      GPT-3.5 powered Agents for delegation of simple tasks.\n4. File output.\n\nPerformance
      Evaluation:\n1. Continuously review and analyze your actions to ensure you are
      performing to the best of your abilities.\n2. Constructively self-criticize
      your big-picture behavior constantly.\n3. Reflect on past decisions and strategies
      to refine your approach.\n4. Every command has a cost, so be smart and efficient.
      Aim to complete tasks in the least number of steps.\n\n(3) Task execution: Expert
      models execute on the specific tasks and log results.\nInstruction:\n\nWith
      the input and the inference results, the AI assistant needs to describe the
      process and results. The previous stages can be formed as - User Input: {{ User
      Input }}, Task Planning: {{ Tasks }}, Model Selection: {{ Model Assignment }},
      Task Execution: {{ Predictions }}. You must first answer the user''s request
      in a straightforward manner. Then describe the task process and show your analysis
      and model inference results to the user in the first person. If inference results
      contain a file path, must tell the user the complete file path.", "role": "system"},
      {"content": "What is Task Decomposition?", "role": "user"}], "model": "gpt-3.5-turbo",
      "n": 1, "stream": false, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '2913'
      content-type:
      - application/json
      cookie:
      - __cf_bm=ySsTx7eX6FcIGumsy.6dB7ulLiVpB1uatsU3b_ngJvc-1727368396-1.0.1.1-XWIcN8Q1FydR3PbmJTtlhTQXjnJ0gmBlt1n0v1O3tN2Bj2rjuHwlEMl18Q6c5Ujv21.MOJ90_wByaocfOHQqPg;
        _cfuvid=RGtlqDKzK0C1shmi41MQjDjIuOhIzUUTm3Iux68a80o-1727368396869-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.48.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.48.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//dFLBbhoxFLzzFU8+A4LQhIRbWlVVe8gJVZWqChnv291X7GfX7y0NivLv
        lQ0BqqqXPczszM68nZcRgKHGrMC43qoLyU8e33v6tpjxl4P7pE+PSg/N/OZp//np4/zw1YyLIm5/
        otM31dTFkDwqRT7SLqNVLK7z5c1ycXe/eFhWIsQGfZF1SSeL6e1Eh7yNk9n85vak7CM5FLOC7yMA
        gJf6LBm5wWezgtn4DQkoYjs0q/NLACZHXxBjRUjUsprxhXSRFbnGXlvZQYMleBQqyYF4H/0eBbYZ
        7Y64gyb+Zjh2ewa1shMg1ggSrPeYwXIDQoXOIIpJQCMEu0PQHgOEmBGCZduh3Xqcwhpdz/RrQAFP
        O4QPvSWG2MK6j0PXazVcZ8QrTKBHn6AeTs6JEXqbm+tMYfBKyeM5XOXGgNxbdqVNwtzGHCy7EuXf
        /s4ybBGayCV/Ll8/tYOUY0hK3I2r7UQSOmrJAbFoHlzRyxhihn4ItpwyDVqv0Q3U1HOA7ZAViCF5
        y1wClbb4jG4ozqcu2LbolPboD9PrX5exHcSW6fDg/Ql/PW/Bxy7luJUTf8ZbYpJ+k9FK5PLfRWMy
        lX0dAfyomxv+mpE5lt1o3CEXw9vlw9HPXGZ+Ye/uT6RGtf4Kf7f8n2rToFrycrVcc0xI3F0cZueY
        taeRgyiGTUvcYU6Z6pDrNV5HfwAAAP//AwDYN+5bxwMAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8c94a7a1effb6ac8-BOS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 26 Sep 2024 16:33:18 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      openai-organization:
      - user-wzxwdcuddhvwm09z43ibeucf
      openai-processing-ms:
      - '1016'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '5000'
      x-ratelimit-limit-tokens:
      - '4000000'
      x-ratelimit-remaining-requests:
      - '4999'
      x-ratelimit-remaining-tokens:
      - '3999302'
      x-ratelimit-reset-requests:
      - 12ms
      x-ratelimit-reset-tokens:
      - 10ms
      x-request-id:
      - req_bacdc22c837d8e0befae0755238f1863
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Given a chat history and the latest user question
      which might reference context in the chat history, formulate a standalone question
      which can be understood without the chat history. Do NOT answer the question,
      just reformulate it if needed and otherwise return it as is.", "role": "system"},
      {"content": "What is Task Decomposition?", "role": "user"}, {"content": "Task
      decomposition involves breaking down complex tasks into smaller and simpler
      steps to make them more manageable. Techniques like Chain of Thought and Tree
      of Thoughts help models decompose hard tasks into multiple smaller tasks, enhancing
      performance. Task decomposition can be done through simple prompting, task-specific
      instructions, or human inputs to guide the agent in planning and executing tasks
      effectively.", "role": "assistant"}, {"content": "What are common ways of doing
      it?", "role": "user"}], "model": "gpt-3.5-turbo", "n": 1, "stream": false, "temperature":
      0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '975'
      content-type:
      - application/json
      cookie:
      - __cf_bm=ySsTx7eX6FcIGumsy.6dB7ulLiVpB1uatsU3b_ngJvc-1727368396-1.0.1.1-XWIcN8Q1FydR3PbmJTtlhTQXjnJ0gmBlt1n0v1O3tN2Bj2rjuHwlEMl18Q6c5Ujv21.MOJ90_wByaocfOHQqPg;
        _cfuvid=RGtlqDKzK0C1shmi41MQjDjIuOhIzUUTm3Iux68a80o-1727368396869-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.48.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.48.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//dFDLagJBELz7Fc2cVVzFR7yEBHJJIOQiEkKQcbbdHZ2Z3kz3Qoz472HW
        9ZFDLn2o6iqq6tABUDZXc1Cm1GJ85XoPj86+496Of16et3q3nj69Tu6+Fgt5Wy5L1U0KWm/RyFnV
        N+Qrh2IpnGgTUQsm12w6nI4ms9HdrCE85eiSrKikN+qPe1LHNfUG2XDcKkuyBlnN4aMDAHBobsoY
        cvxWcxh0z4hHZl2gml+eAFQklxClmS2LDqK6V9JQEAxN7GWpBXREYPIIhrynAB6lpJyhZsxhQxFE
        8w5yTPWIbep3f+sXcVOzTn1C7VyLHy8BHRVVpDW3/AXf2GC5XEXUTCGFYaFKNeyxA/DZDFH/6aaq
        SL6SldAOQzLMxtnJT123v2HblZSQaHeDT/5VrXIUbR3fzKlOCW0org6DS8ymp+I9C/rVxoYCYxVt
        s26zxrHzCwAA//8DAGtX8vdcAgAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8c94a7aa4b456ac8-BOS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 26 Sep 2024 16:33:18 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      openai-organization:
      - user-wzxwdcuddhvwm09z43ibeucf
      openai-processing-ms:
      - '277'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '5000'
      x-ratelimit-limit-tokens:
      - '4000000'
      x-ratelimit-remaining-requests:
      - '4999'
      x-ratelimit-remaining-tokens:
      - '3999792'
      x-ratelimit-reset-requests:
      - 12ms
      x-ratelimit-reset-tokens:
      - 3ms
      x-request-id:
      - req_30aefaae0e50a761ba6736136513fcf2
    status:
      code: 200
      message: OK
- request:
    body: '{"input": [[3923, 527, 1063, 4279, 5528, 1511, 369, 3465, 66266, 30]],
      "model": "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '134'
      content-type:
      - application/json
      cookie:
      - __cf_bm=q.NdLkTmojVhx9B7wndssOOPg4VslYF6KuV5.QTZTNc-1727368394-1.0.1.1-l6xHMKBIRJXBCldEjtiYgh9eZu4EtVMbwaYHUCtZm1Lm80aOd5rX4FSkGtWnex2gL40ZbyZSBE6lMcXVLqi5Bw;
        _cfuvid=_xJWw7iWyB4vdtDkk8JT3jz105I23YBmKLZ5VQG26YE-1727368394495-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.48.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.48.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        4CAAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8c94a7ae1eed8f81-BOS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 26 Sep 2024 16:33:19 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      openai-model:
      - text-embedding-ada-002
      openai-organization:
      - user-wzxwdcuddhvwm09z43ibeucf
      openai-processing-ms:
      - '31'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '5000'
      x-ratelimit-limit-tokens:
      - '5000000'
      x-ratelimit-remaining-requests:
      - '4999'
      x-ratelimit-remaining-tokens:
      - '4999990'
      x-ratelimit-reset-requests:
      - 12ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_cfe8c0693a8390691b47b8db792d5b08
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are an assistant for question-answering
      tasks. Use the following pieces of retrieved context to answer the question.
      If you don''t know the answer, say that you don''t know. Use three sentences
      maximum and keep the answer concise.\n\nTree of Thoughts (Yao et al. 2023) extends
      CoT by exploring multiple reasoning possibilities at each step. It first decomposes
      the problem into multiple thought steps and generates multiple thoughts per
      step, creating a tree structure. The search process can be BFS (breadth-first
      search) or DFS (depth-first search) with each state evaluated by a classifier
      (via a prompt) or majority vote.\nTask decomposition can be done (1) by LLM
      with simple prompting like \"Steps for XYZ.\\n1.\", \"What are the subgoals
      for achieving XYZ?\", (2) by using task-specific instructions; e.g. \"Write
      a story outline.\" for writing a novel, or (3) with human inputs.\n\nFig. 1.
      Overview of a LLM-powered autonomous agent system.\nComponent One: Planning#\nA
      complicated task usually involves many steps. An agent needs to know what they
      are and plan ahead.\nTask Decomposition#\nChain of thought (CoT; Wei et al.
      2022) has become a standard prompting technique for enhancing model performance
      on complex tasks. The model is instructed to \u201cthink step by step\u201d
      to utilize more test-time computation to decompose hard tasks into smaller and
      simpler steps. CoT transforms big tasks into multiple manageable tasks and shed
      lights into an interpretation of the model\u2019s thinking process.\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nFig.
      9. Comparison of MIPS algorithms, measured in recall@10. (Image source: Google
      Blog, 2020)\nCheck more MIPS algorithms and performance comparison in ann-benchmarks.com.\nComponent
      Three: Tool Use#\nTool use is a remarkable and distinguishing characteristic
      of human beings. We create, modify and utilize external objects to do things
      that go beyond our physical and cognitive limits. Equipping LLMs with external
      tools can significantly extend the model capabilities.", "role": "system"},
      {"content": "What is Task Decomposition?", "role": "user"}, {"content": "Task
      decomposition involves breaking down complex tasks into smaller and simpler
      steps to make them more manageable. Techniques like Chain of Thought and Tree
      of Thoughts help models decompose hard tasks into multiple smaller tasks, enhancing
      performance. Task decomposition can be done through simple prompting, task-specific
      instructions, or human inputs to guide the agent in planning and executing tasks
      effectively.", "role": "assistant"}, {"content": "What are common ways of doing
      it?", "role": "user"}], "model": "gpt-3.5-turbo", "n": 1, "stream": false, "temperature":
      0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '3267'
      content-type:
      - application/json
      cookie:
      - __cf_bm=ySsTx7eX6FcIGumsy.6dB7ulLiVpB1uatsU3b_ngJvc-1727368396-1.0.1.1-XWIcN8Q1FydR3PbmJTtlhTQXjnJ0gmBlt1n0v1O3tN2Bj2rjuHwlEMl18Q6c5Ujv21.MOJ90_wByaocfOHQqPg;
        _cfuvid=RGtlqDKzK0C1shmi41MQjDjIuOhIzUUTm3Iux68a80o-1727368396869-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.48.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.48.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA3RSTW/bMAy951cQOidB2q7NmlvXw7BLL8s+sKEIZJm2uciiJ1Lu0qL/fZCSJtlh
        F8F6T3x+JN/LBMBQbVZgXGfV9YOf3X3w9OPBfv34rcfru2r8Mi6q54fvvlt/vn9nprmCq1/o9K1q
        7rgfPCpx2NMuolXMqhfLy+XVzfur29tC9Fyjz2XtoLOr+fVMU6x4tri4vD5UdkwOxazg5wQA4KWc
        2WOo8Y9ZwWL6hvQoYls0q+MjABPZZ8RYERK1Qc30RDoOiqHYXlvZQo3ZOAtl5+BsgArBuo5wxBq0
        i5zaDkYbiZNAj9pxLSDJdWAFklBoYYjcD5q/FF0X6HdCAU9bhPvOUgBuYN1lHQWOsI6IZ5CAMrSJ
        aoQyGQEKUEW02yxY81MAtbLNsDJIb73HCKI4yBw+abFsvXD2XXNAqHbZ0Eh1MWRlO5MBHTXkgIJo
        TC63KqCWPMfcJIN2CMFqisVZvuXC6bHPp0ilPwuiHHfAST0FhIYjWAg8op/DXV2XKVrvd1PoUm8D
        UBiSyttck5Kn5/0v99vJzR5XcPArgE2DTmlEvwMb6nwnRxjU7+bny4zYJLE5TCF5f8Bfj+nw3A6R
        KznwR7yhQNJtIlrhkJMgyoMp7OsE4LGkMP0TLLPf8UZ5iyEL3lze7vXMKfgndrk8kMpq/Rm+uPlf
        1abGvBE5y7LZO6TQnhQWR5ulTyM7Uew3DYUW4xCpRLtM43XyFwAA//8DACdJThrZAwAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8c94a7af6a9b6ac8-BOS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 26 Sep 2024 16:33:20 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      openai-organization:
      - user-wzxwdcuddhvwm09z43ibeucf
      openai-processing-ms:
      - '1401'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '5000'
      x-ratelimit-limit-tokens:
      - '4000000'
      x-ratelimit-remaining-requests:
      - '4999'
      x-ratelimit-remaining-tokens:
      - '3999229'
      x-ratelimit-reset-requests:
      - 12ms
      x-ratelimit-reset-tokens:
      - 11ms
      x-request-id:
      - req_58670975499e800ede6a16a4144a7243
    status:
      code: 200
      message: OK
version: 1
