interactions:
- request:
    body: '{"input": [[3923, 374, 5546, 97478, 3571, 30]], "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '111'
      content-type:
      - application/json
      cookie:
      - __cf_bm=VfEiWL8lVjWDJ1eYYOi41T46H54QmaeZKam3keUKU8Y-1727449089-1.0.1.1-RKntjzRCcHu9Mqp_E4kPBhvAI4uXxVtq.F7.1g6AhkOTdaLeADzeqv_utJ.0mo8mN._ZdF5bpjA.oMZNgSmYMg;
        _cfuvid=UwB1KnBNeptIb7UOULQlELR2aOjMHWHKYazoDYURRcw-1727449089799-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.48.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.48.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8c9c59bc0e394ce3-BOS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Sep 2024 14:58:12 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      openai-model:
      - text-embedding-ada-002
      openai-organization:
      - user-wzxwdcuddhvwm09z43ibeucf
      openai-processing-ms:
      - '24'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '5000'
      x-ratelimit-limit-tokens:
      - '5000000'
      x-ratelimit-remaining-requests:
      - '4999'
      x-ratelimit-remaining-tokens:
      - '4999993'
      x-ratelimit-reset-requests:
      - 12ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_b1fe08a35ce4514ec76016cca8f2e9cf
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are an assistant for question-answering
      tasks. Use the following pieces of retrieved context to answer the question.
      If you don''t know the answer, say that you don''t know. Use three sentences
      maximum and keep the answer concise.\n\nFig. 1. Overview of a LLM-powered autonomous
      agent system.\nComponent One: Planning#\nA complicated task usually involves
      many steps. An agent needs to know what they are and plan ahead.\nTask Decomposition#\nChain
      of thought (CoT; Wei et al. 2022) has become a standard prompting technique
      for enhancing model performance on complex tasks. The model is instructed to
      \u201cthink step by step\u201d to utilize more test-time computation to decompose
      hard tasks into smaller and simpler steps. CoT transforms big tasks into multiple
      manageable tasks and shed lights into an interpretation of the model\u2019s
      thinking process.\n\nTree of Thoughts (Yao et al. 2023) extends CoT by exploring
      multiple reasoning possibilities at each step. It first decomposes the problem
      into multiple thought steps and generates multiple thoughts per step, creating
      a tree structure. The search process can be BFS (breadth-first search) or DFS
      (depth-first search) with each state evaluated by a classifier (via a prompt)
      or majority vote.\nTask decomposition can be done (1) by LLM with simple prompting
      like \"Steps for XYZ.\\n1.\", \"What are the subgoals for achieving XYZ?\",
      (2) by using task-specific instructions; e.g. \"Write a story outline.\" for
      writing a novel, or (3) with human inputs.\n\nResources:\n1. Internet access
      for searches and information gathering.\n2. Long Term memory management.\n3.
      GPT-3.5 powered Agents for delegation of simple tasks.\n4. File output.\n\nPerformance
      Evaluation:\n1. Continuously review and analyze your actions to ensure you are
      performing to the best of your abilities.\n2. Constructively self-criticize
      your big-picture behavior constantly.\n3. Reflect on past decisions and strategies
      to refine your approach.\n4. Every command has a cost, so be smart and efficient.
      Aim to complete tasks in the least number of steps.\n\n(3) Task execution: Expert
      models execute on the specific tasks and log results.\nInstruction:\n\nWith
      the input and the inference results, the AI assistant needs to describe the
      process and results. The previous stages can be formed as - User Input: {{ User
      Input }}, Task Planning: {{ Tasks }}, Model Selection: {{ Model Assignment }},
      Task Execution: {{ Predictions }}. You must first answer the user''s request
      in a straightforward manner. Then describe the task process and show your analysis
      and model inference results to the user in the first person. If inference results
      contain a file path, must tell the user the complete file path.", "role": "system"},
      {"content": "What is Task Decomposition?", "role": "user"}], "model": "gpt-3.5-turbo",
      "n": 1, "stream": false, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '2913'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.48.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.48.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA3RS0WobMRB891cseraN49ox8VsIodC8tNSBhlKMTrc+ba3Tqto9x2nIvxedHduF
        9uUOZjSrmdW8DgAM1WYJxnmrrk1hdHt3TbPHL7fd/af907fH+4fPv6di3cOTfv3ozLAouPqJTt9V
        Y8dtCqjE8UC7jFaxTL1aTBez2c3kZtoTLdcYiqxJOvowno+0yxWPJlfT+VHpmRyKWcL3AQDAa/8t
        HmONe7OEyfAdaVHENmiWp0MAJnMoiLEiJGqjmuGZdBwVY297ZWULNRbjLFScAwlYUHQ+0q8OoROs
        QRmqjHYLNT9HOMTcg1rZClBUBmltCJjBxhqECp1BFJOMYeVJIGV2KAIeQxKwDUYV4Az9IgS8jXXA
        MiqTs4rH0S1nBNxs0CntMLxA9QI17aim2IB6bA+XtzbaBm0VEKSreukY/pHM2QgVgnWecFdS+cxd
        46FF9VwLBNoi3HlLEXgDK19ILS5XGfECkiE8e3Iemo5qLEYOOcqa1FPc9tGL2f7PGXCfQsnSdkEp
        BYSMVjiWGIlFqKJASihgFdA63wvHl2+WcdOJLZ2JXQhH/O1UgsBNylzJkT/hG4okfn24rjy4KCfT
        s28DgB992bq/+mNS5jbpWnmLsQycL24O88y532d2cWyiUVYbzvj17L+qdY1qKchFZc1pIecJk5PN
        PqeRF1Fs1xuKDeaUqW9wv423wR8AAAD//wMAthET28ADAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8c9c59bdb99f8f6a-BOS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Sep 2024 14:58:13 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=7LquqTwFy9BQq57W1c5I.wU5NwfZwUcplc3QqnnmI1c-1727449093-1.0.1.1-sNVx5oEwffvbSIbZ4_6FnFzbDNZSYM67VLAcsn9HioqTVF4LPuWefKMHYruYY9iOJpYmCth5MllBIf1UkNpqJw;
        path=/; expires=Fri, 27-Sep-24 15:28:13 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=lsTAvzmFn.L_wigWK6RJysxROIwzFjlrgXoZv_VsmSY-1727449093898-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      openai-organization:
      - user-wzxwdcuddhvwm09z43ibeucf
      openai-processing-ms:
      - '1024'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '5000'
      x-ratelimit-limit-tokens:
      - '4000000'
      x-ratelimit-remaining-requests:
      - '4999'
      x-ratelimit-remaining-tokens:
      - '3999302'
      x-ratelimit-reset-requests:
      - 12ms
      x-ratelimit-reset-tokens:
      - 10ms
      x-request-id:
      - req_e9cf2143bbbcbc8b9cc9900efb6e1479
    status:
      code: 200
      message: OK
version: 1
