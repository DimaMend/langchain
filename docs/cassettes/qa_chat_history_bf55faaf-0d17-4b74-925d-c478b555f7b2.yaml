interactions:
- request:
    body: '{"input": [[3923, 374, 5546, 97478, 3571, 30]], "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '111'
      content-type:
      - application/json
      cookie:
      - __cf_bm=cOXiJt3ZhX.U8bFoK4IRnAyuukfzOuljTSL8Djv6RAU-1727447395-1.0.1.1-nIkPz3.kq2Kro4YDVASMK53qwkXJSHFWAahgsq25k3AEaJ3ca1lMg4435NfPXMCNK.0.lEkyt_Bv41KgEOpqIg;
        _cfuvid=tQiGoA94xaHAHCJPWqSaRbG4swZHYRF3d3SVkdW5i6k-1727447395171-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.48.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.48.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        /utf/wcAAP//AwBDWPyo3iAAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8c9c3051befc9041-BOS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Sep 2024 14:29:56 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      openai-model:
      - text-embedding-ada-002
      openai-organization:
      - user-wzxwdcuddhvwm09z43ibeucf
      openai-processing-ms:
      - '23'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '5000'
      x-ratelimit-limit-tokens:
      - '5000000'
      x-ratelimit-remaining-requests:
      - '4999'
      x-ratelimit-remaining-tokens:
      - '4999993'
      x-ratelimit-reset-requests:
      - 12ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_801d83fcf951958a34181e86e6acec75
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are an assistant for question-answering
      tasks. Use the following pieces of retrieved context to answer the question.
      If you don''t know the answer, say that you don''t know. Use three sentences
      maximum and keep the answer concise.\n\nFig. 1. Overview of a LLM-powered autonomous
      agent system.\nComponent One: Planning#\nA complicated task usually involves
      many steps. An agent needs to know what they are and plan ahead.\nTask Decomposition#\nChain
      of thought (CoT; Wei et al. 2022) has become a standard prompting technique
      for enhancing model performance on complex tasks. The model is instructed to
      \u201cthink step by step\u201d to utilize more test-time computation to decompose
      hard tasks into smaller and simpler steps. CoT transforms big tasks into multiple
      manageable tasks and shed lights into an interpretation of the model\u2019s
      thinking process.\n\nTree of Thoughts (Yao et al. 2023) extends CoT by exploring
      multiple reasoning possibilities at each step. It first decomposes the problem
      into multiple thought steps and generates multiple thoughts per step, creating
      a tree structure. The search process can be BFS (breadth-first search) or DFS
      (depth-first search) with each state evaluated by a classifier (via a prompt)
      or majority vote.\nTask decomposition can be done (1) by LLM with simple prompting
      like \"Steps for XYZ.\\n1.\", \"What are the subgoals for achieving XYZ?\",
      (2) by using task-specific instructions; e.g. \"Write a story outline.\" for
      writing a novel, or (3) with human inputs.\n\nResources:\n1. Internet access
      for searches and information gathering.\n2. Long Term memory management.\n3.
      GPT-3.5 powered Agents for delegation of simple tasks.\n4. File output.\n\nPerformance
      Evaluation:\n1. Continuously review and analyze your actions to ensure you are
      performing to the best of your abilities.\n2. Constructively self-criticize
      your big-picture behavior constantly.\n3. Reflect on past decisions and strategies
      to refine your approach.\n4. Every command has a cost, so be smart and efficient.
      Aim to complete tasks in the least number of steps.\n\n(3) Task execution: Expert
      models execute on the specific tasks and log results.\nInstruction:\n\nWith
      the input and the inference results, the AI assistant needs to describe the
      process and results. The previous stages can be formed as - User Input: {{ User
      Input }}, Task Planning: {{ Tasks }}, Model Selection: {{ Model Assignment }},
      Task Execution: {{ Predictions }}. You must first answer the user''s request
      in a straightforward manner. Then describe the task process and show your analysis
      and model inference results to the user in the first person. If inference results
      contain a file path, must tell the user the complete file path.", "role": "system"},
      {"content": "What is Task Decomposition?", "role": "user"}], "model": "gpt-3.5-turbo",
      "n": 1, "stream": false, "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '2913'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.48.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.48.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.7
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA3RSy27bMBC8+ysWPNtGXrYQ34L0gaAoigIGeigKg6JW4sYUV+Wu0gRB/r0g5dju
        oRceZjjD2eG+zgAMNWYDxnmrrh/C4u5+/Zm4it8un767VP94+PrJrZ6/2Ie76vGjmWcF14/o9F21
        dNwPAZU4TrRLaBWz62V1Vd3cVNe360L03GDIsm7QxfVytdAx1by4uLxaHZSeyaGYDfycAQC8ljNn
        jA0+mw1czN+RHkVsh2ZzvARgEoeMGCtCojaqmZ9Ix1ExlthbK3toMAdnoZwcSMCCovORfo8Io2AD
        ylAntHto+E+EacxnUCt7AYrKIL0NARPY2IBQphOI4iBL2HoSGBI7FAGPYRCwHUYV4ASlCAFvYxMQ
        GmpbcmPQg3X9Ag09UUOxA/XYT2/1nBB6G22Htg4IMtbl+hI+UNtiwqjQo3puBALtEe69pQjcwtbz
        2HktKbcJ8QwTsOk07HsjeD5jPwalIT+YB5sDRm+jy9kGTC2n3kaHxdtOkSnm1FmMaUiotvTLbUHV
        U9wX8VTN8vyHEraj2LwhcQzhgL8dvzxwNySu5cAf8ZYiid8ltMIxf68oD6awbzOAX2W1xn+2xQyJ
        +0F3ynuM2XBV3U5+5rTNJ3ZdHUhlteEMv1n/T7VrUC0FOVtQMyWk2J0cLo4xy5xGXkSx37UUu9we
        lX0tbbzN/gIAAP//AwDL12F1rgMAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8c9c3052e9fc8f69-BOS
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Sep 2024 14:29:57 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=leU1rnrd5Mk7Zbv8nf22ZmPrT0VrL1sEyGEWl3U1wFQ-1727447397-1.0.1.1-_2BIynft9V5Snkjj0VTPA9WUaBVOo9jSC2N.S6EUVGXe1WFQlbf2GV8XCts3aJQlM6UOlclKs_C23Kw7GtjR5A;
        path=/; expires=Fri, 27-Sep-24 14:59:57 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=B7aDmti5xRKNceE.Zd020VfOM7Z5AVbpTiXyU9DlShM-1727447397769-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      openai-organization:
      - user-wzxwdcuddhvwm09z43ibeucf
      openai-processing-ms:
      - '1350'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '5000'
      x-ratelimit-limit-tokens:
      - '4000000'
      x-ratelimit-remaining-requests:
      - '4999'
      x-ratelimit-remaining-tokens:
      - '3999302'
      x-ratelimit-reset-requests:
      - 12ms
      x-ratelimit-reset-tokens:
      - 10ms
      x-request-id:
      - req_5e5ac66e844febc67544736009f1408f
    status:
      code: 200
      message: OK
version: 1
