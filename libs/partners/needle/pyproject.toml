[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "needle-langchain"
version = "0.1.0"
description = "Needle RAG tools for LangChain"
authors = [
    "Onur Eken <m.onureken@gmail.com>",
    "Jan Heimes <heimesjan9@gmail.com>",
]
readme = "README.md"
packages = [{ include = "langchain_needle" }]
license = "MIT"
keywords = [
    "needle",
    "api",
    "retrieval-augmented generation",
    "rag",
    "information-retrieval",
    "artificial intelligence",
    "ai",
]
classifiers = [
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Development Status :: 5 - Production/Stable",
    "Operating System :: OS Independent",
    "License :: OSI Approved :: MIT License",
]

[tool.poetry.urls]
homepage = "https://needle-ai.com"
documentation = "https://docs.needle-ai.com"
repository = "https://github.com/JANHMS/needle-langchain"
issues = "https://github.com/JANHMS/needle-langchain/issues"

[tool.poetry.dependencies]
python = ">=3.9.0,<4.0"
langchain-core = "^0.3.1"
pydantic = "^2"
needle-python = "^0.3.0"

[tool.poetry.dev-dependencies]
pytest = "^8.2.2"
openai = "^1.39.0"
ipykernel = "^6.29.5"
ipywidgets = "^8.1.3"
python = ">=3.9.0,<4.0"
langchain-core = "^0.3.1"
pydantic = "^2"
needle-python = "^0.3.0"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "^8.3.1"
pytest-mock = "^3.14.0"
pytest-cov = "^5.0.0"
pytest-socket = "^0.7.0"
langchain-core = { path = "../../core", develop = true }

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
ruff = "^0.5.6"
mypy = "^1.11.1"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
ipykernel = "^6.29.5"
langchain-core = { path = "../../core", develop = true }
pre-commit = "^3.7.1"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "D",  # pydocstyle
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "C901", # function is too complex
    "D206", # indent with spaces, not recommended with formatter
    "W191", # tab-indentation, not recommended with formatter
    "D203", # no-blank-line-before-class
    "D213", # multi-line-summary-second-line
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D"]

[tool.ruff.lint.isort]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
disallow_untyped_defs = true
strict_optional = true
ignore_missing_imports = false

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "--verbose"
filterwarnings = 'error'
xfail_strict = true
testpaths = ["tests"]
markers = ["integration: integration tests"]

[tool.coverage.run]
source = ["langchain_needle"]
branch = true
omit = ["tests/*"]

[tool.coverage.report]
precision = 2
exclude_lines = [
    'pragma: no cover',
    'raise NotImplementedError',
    'if TYPE_CHECKING:',
    '@overload',
]

[tool.coverage.xml]
output = "coverage.xml"
