"""**Tools** are classes that an Agent uses to interact with the world.

Each tool has a **description**. Agent uses the description to choose the right
tool for the job.

**Class hierarchy:**

.. code-block::

    ToolMetaclass --> BaseTool --> <name>Tool  # Examples: AIPluginTool, BaseGraphQLTool
                                   <name>      # Examples: BraveSearch, HumanInputRun

**Main helpers:**

.. code-block::

    CallbackManagerForToolRun, AsyncCallbackManagerForToolRun
"""
import warnings
from typing import TYPE_CHECKING, Any

from langchain_core._api import LangChainDeprecationWarning
from langchain_core.tools import BaseTool, StructuredTool, Tool, tool

from langchain._api import create_importer
from langchain.utils.interactive_env import is_interactive_env

if TYPE_CHECKING:
    from langchain_community.tools import (
        AINAppOps,
        AINOwnerOps,
        AINRuleOps,
        AINTransfer,
        AINValueOps,
        AIPluginTool,
        APIOperation,
        ArxivQueryRun,
        AzureCogsFormRecognizerTool,
        AzureCogsImageAnalysisTool,
        AzureCogsSpeech2TextTool,
        AzureCogsText2SpeechTool,
        AzureCogsTextAnalyticsHealthTool,
        BaseGraphQLTool,
        BaseRequestsTool,
        BaseSparkSQLTool,
        BaseSQLDatabaseTool,
        BearlyInterpreterTool,
        BingSearchResults,
        BingSearchRun,
        BraveSearch,
        ClickTool,
        CopyFileTool,
        CurrentWebPageTool,
        DeleteFileTool,
        DuckDuckGoSearchResults,
        DuckDuckGoSearchRun,
        E2BDataAnalysisTool,
        EdenAiExplicitImageTool,
        EdenAiObjectDetectionTool,
        EdenAiParsingIDTool,
        EdenAiParsingInvoiceTool,
        EdenAiSpeechToTextTool,
        EdenAiTextModerationTool,
        EdenAiTextToSpeechTool,
        EdenaiTool,
        ElevenLabsText2SpeechTool,
        ExtractHyperlinksTool,
        ExtractTextTool,
        FileSearchTool,
        GetElementsTool,
        GmailCreateDraft,
        GmailGetMessage,
        GmailGetThread,
        GmailSearch,
        GmailSendMessage,
        GoogleCloudTextToSpeechTool,
        GooglePlacesTool,
        GoogleSearchResults,
        GoogleSearchRun,
        GoogleSerperResults,
        GoogleSerperRun,
        HumanInputRun,
        IFTTTWebhook,
        InfoPowerBITool,
        InfoSparkSQLTool,
        InfoSQLDatabaseTool,
        JiraAction,
        JsonGetValueTool,
        JsonListKeysTool,
        ListDirectoryTool,
        ListPowerBITool,
        ListSparkSQLTool,
        ListSQLDatabaseTool,
        MerriamWebsterQueryRun,
        MetaphorSearchResults,
        MoveFileTool,
        NasaAction,
        NavigateBackTool,
        NavigateTool,
        O365CreateDraftMessage,
        O365SearchEmails,
        O365SearchEvents,
        O365SendEvent,
        O365SendMessage,
        OpenAPISpec,
        OpenWeatherMapQueryRun,
        PubmedQueryRun,
        QueryCheckerTool,
        QueryPowerBITool,
        QuerySparkSQLTool,
        QuerySQLCheckerTool,
        QuerySQLDataBaseTool,
        ReadFileTool,
        RedditSearchRun,
        RequestsDeleteTool,
        RequestsGetTool,
        RequestsPatchTool,
        RequestsPostTool,
        RequestsPutTool,
        SceneXplainTool,
        SearchAPIResults,
        SearchAPIRun,
        SearxSearchResults,
        SearxSearchRun,
        ShellTool,
        SlackGetChannel,
        SlackGetMessage,
        SlackScheduleMessage,
        SlackSendMessage,
        SleepTool,
        StackExchangeTool,
        StdInInquireTool,
        SteamshipImageGenerationTool,
        SteamWebAPIQueryRun,
        VectorStoreQATool,
        VectorStoreQAWithSourcesTool,
        WikipediaQueryRun,
        WolframAlphaQueryRun,
        WriteFileTool,
        YahooFinanceNewsTool,
        YouTubeSearchTool,
        ZapierNLAListActions,
        ZapierNLARunAction,
    )

# Used for internal purposes
_DEPRECATED_TOOLS = {"PythonAstREPLTool", "PythonREPLTool"}


def _import_python_tool_PythonAstREPLTool() -> Any:
    raise ImportError(
        "This tool has been moved to langchain experiment. "
        "This tool has access to a python REPL. "
        "For best practices make sure to sandbox this tool. "
        "Read https://github.com/langchain-ai/langchain/blob/master/SECURITY.md "
        "To keep using this code as is, install langchain experimental and "
        "update relevant imports replacing 'langchain' with 'langchain_experimental'"
    )


def _import_python_tool_PythonREPLTool() -> Any:
    raise ImportError(
        "This tool has been moved to langchain experiment. "
        "This tool has access to a python REPL. "
        "For best practices make sure to sandbox this tool. "
        "Read https://github.com/langchain-ai/langchain/blob/master/SECURITY.md "
        "To keep using this code as is, install langchain experimental and "
        "update relevant imports replacing 'langchain' with 'langchain_experimental'"
    )


# Create a way to dynamically look up deprecated imports.
# Used to consolidate logic for raising deprecation warnings and
# handling optional imports.
DEPRECATED_LOOKUP = {
    "AINAppOps": "langchain_community.tools",
    "AINOwnerOps": "langchain_community.tools",
    "AINRuleOps": "langchain_community.tools",
    "AINTransfer": "langchain_community.tools",
    "AINValueOps": "langchain_community.tools",
    "AIPluginTool": "langchain_community.tools",
    "APIOperation": "langchain_community.tools",
    "ArxivQueryRun": "langchain_community.tools",
    "AzureCogsFormRecognizerTool": "langchain_community.tools",
    "AzureCogsImageAnalysisTool": "langchain_community.tools",
    "AzureCogsSpeech2TextTool": "langchain_community.tools",
    "AzureCogsText2SpeechTool": "langchain_community.tools",
    "AzureCogsTextAnalyticsHealthTool": "langchain_community.tools",
    "BaseGraphQLTool": "langchain_community.tools",
    "BaseRequestsTool": "langchain_community.tools",
    "BaseSQLDatabaseTool": "langchain_community.tools",
    "BaseSparkSQLTool": "langchain_community.tools",
    "BearlyInterpreterTool": "langchain_community.tools",
    "BingSearchResults": "langchain_community.tools",
    "BingSearchRun": "langchain_community.tools",
    "BraveSearch": "langchain_community.tools",
    "ClickTool": "langchain_community.tools",
    "CopyFileTool": "langchain_community.tools",
    "CurrentWebPageTool": "langchain_community.tools",
    "DeleteFileTool": "langchain_community.tools",
    "DuckDuckGoSearchResults": "langchain_community.tools",
    "DuckDuckGoSearchRun": "langchain_community.tools",
    "E2BDataAnalysisTool": "langchain_community.tools",
    "EdenAiExplicitImageTool": "langchain_community.tools",
    "EdenAiObjectDetectionTool": "langchain_community.tools",
    "EdenAiParsingIDTool": "langchain_community.tools",
    "EdenAiParsingInvoiceTool": "langchain_community.tools",
    "EdenAiSpeechToTextTool": "langchain_community.tools",
    "EdenAiTextModerationTool": "langchain_community.tools",
    "EdenAiTextToSpeechTool": "langchain_community.tools",
    "EdenaiTool": "langchain_community.tools",
    "ElevenLabsText2SpeechTool": "langchain_community.tools",
    "ExtractHyperlinksTool": "langchain_community.tools",
    "ExtractTextTool": "langchain_community.tools",
    "FileSearchTool": "langchain_community.tools",
    "GetElementsTool": "langchain_community.tools",
    "GmailCreateDraft": "langchain_community.tools",
    "GmailGetMessage": "langchain_community.tools",
    "GmailGetThread": "langchain_community.tools",
    "GmailSearch": "langchain_community.tools",
    "GmailSendMessage": "langchain_community.tools",
    "GoogleCloudTextToSpeechTool": "langchain_community.tools",
    "GooglePlacesTool": "langchain_community.tools",
    "GoogleSearchResults": "langchain_community.tools",
    "GoogleSearchRun": "langchain_community.tools",
    "GoogleSerperResults": "langchain_community.tools",
    "GoogleSerperRun": "langchain_community.tools",
    "SearchAPIResults": "langchain_community.tools",
    "SearchAPIRun": "langchain_community.tools",
    "HumanInputRun": "langchain_community.tools",
    "IFTTTWebhook": "langchain_community.tools",
    "InfoPowerBITool": "langchain_community.tools",
    "InfoSQLDatabaseTool": "langchain_community.tools",
    "InfoSparkSQLTool": "langchain_community.tools",
    "JiraAction": "langchain_community.tools",
    "JsonGetValueTool": "langchain_community.tools",
    "JsonListKeysTool": "langchain_community.tools",
    "ListDirectoryTool": "langchain_community.tools",
    "ListPowerBITool": "langchain_community.tools",
    "ListSQLDatabaseTool": "langchain_community.tools",
    "ListSparkSQLTool": "langchain_community.tools",
    "MerriamWebsterQueryRun": "langchain_community.tools",
    "MetaphorSearchResults": "langchain_community.tools",
    "MoveFileTool": "langchain_community.tools",
    "NasaAction": "langchain_community.tools",
    "NavigateBackTool": "langchain_community.tools",
    "NavigateTool": "langchain_community.tools",
    "O365CreateDraftMessage": "langchain_community.tools",
    "O365SearchEmails": "langchain_community.tools",
    "O365SearchEvents": "langchain_community.tools",
    "O365SendEvent": "langchain_community.tools",
    "O365SendMessage": "langchain_community.tools",
    "OpenAPISpec": "langchain_community.tools",
    "OpenWeatherMapQueryRun": "langchain_community.tools",
    "PubmedQueryRun": "langchain_community.tools",
    "RedditSearchRun": "langchain_community.tools",
    "QueryCheckerTool": "langchain_community.tools",
    "QueryPowerBITool": "langchain_community.tools",
    "QuerySQLCheckerTool": "langchain_community.tools",
    "QuerySQLDataBaseTool": "langchain_community.tools",
    "QuerySparkSQLTool": "langchain_community.tools",
    "ReadFileTool": "langchain_community.tools",
    "RequestsDeleteTool": "langchain_community.tools",
    "RequestsGetTool": "langchain_community.tools",
    "RequestsPatchTool": "langchain_community.tools",
    "RequestsPostTool": "langchain_community.tools",
    "RequestsPutTool": "langchain_community.tools",
    "SteamWebAPIQueryRun": "langchain_community.tools",
    "SceneXplainTool": "langchain_community.tools",
    "SearxSearchResults": "langchain_community.tools",
    "SearxSearchRun": "langchain_community.tools",
    "ShellTool": "langchain_community.tools",
    "SlackGetChannel": "langchain_community.tools",
    "SlackGetMessage": "langchain_community.tools",
    "SlackScheduleMessage": "langchain_community.tools",
    "SlackSendMessage": "langchain_community.tools",
    "SleepTool": "langchain_community.tools",
    "StdInInquireTool": "langchain_community.tools",
    "StackExchangeTool": "langchain_community.tools",
    "SteamshipImageGenerationTool": "langchain_community.tools",
    "VectorStoreQATool": "langchain_community.tools",
    "VectorStoreQAWithSourcesTool": "langchain_community.tools",
    "WikipediaQueryRun": "langchain_community.tools",
    "WolframAlphaQueryRun": "langchain_community.tools",
    "WriteFileTool": "langchain_community.tools",
    "YahooFinanceNewsTool": "langchain_community.tools",
    "YouTubeSearchTool": "langchain_community.tools",
    "ZapierNLAListActions": "langchain_community.tools",
    "ZapierNLARunAction": "langchain_community.tools",
}

_import_attribute = create_importer(__package__, deprecated_lookups=DEPRECATED_LOOKUP)


def __getattr__(name: str) -> Any:
    """Look up attributes dynamically."""
    return _import_attribute(name)


__all__ = [
    "AINAppOps",
    "AINOwnerOps",
    "AINRuleOps",
    "AINTransfer",
    "AINValueOps",
    "AIPluginTool",
    "APIOperation",
    "ArxivQueryRun",
    "AzureCogsFormRecognizerTool",
    "AzureCogsImageAnalysisTool",
    "AzureCogsSpeech2TextTool",
    "AzureCogsText2SpeechTool",
    "AzureCogsTextAnalyticsHealthTool",
    "BaseGraphQLTool",
    "BaseRequestsTool",
    "BaseSQLDatabaseTool",
    "BaseSparkSQLTool",
    "BaseTool",
    "BearlyInterpreterTool",
    "BingSearchResults",
    "BingSearchRun",
    "BraveSearch",
    "ClickTool",
    "CopyFileTool",
    "CurrentWebPageTool",
    "DeleteFileTool",
    "DuckDuckGoSearchResults",
    "DuckDuckGoSearchRun",
    "E2BDataAnalysisTool",
    "EdenAiExplicitImageTool",
    "EdenAiObjectDetectionTool",
    "EdenAiParsingIDTool",
    "EdenAiParsingInvoiceTool",
    "EdenAiSpeechToTextTool",
    "EdenAiTextModerationTool",
    "EdenAiTextToSpeechTool",
    "EdenaiTool",
    "ElevenLabsText2SpeechTool",
    "ExtractHyperlinksTool",
    "ExtractTextTool",
    "FileSearchTool",
    "GetElementsTool",
    "GmailCreateDraft",
    "GmailGetMessage",
    "GmailGetThread",
    "GmailSearch",
    "GmailSendMessage",
    "GoogleCloudTextToSpeechTool",
    "GooglePlacesTool",
    "GoogleSearchResults",
    "GoogleSearchRun",
    "GoogleSerperResults",
    "GoogleSerperRun",
    "SearchAPIResults",
    "SearchAPIRun",
    "HumanInputRun",
    "IFTTTWebhook",
    "InfoPowerBITool",
    "InfoSQLDatabaseTool",
    "InfoSparkSQLTool",
    "JiraAction",
    "JsonGetValueTool",
    "JsonListKeysTool",
    "ListDirectoryTool",
    "ListPowerBITool",
    "ListSQLDatabaseTool",
    "ListSparkSQLTool",
    "MerriamWebsterQueryRun",
    "MetaphorSearchResults",
    "MoveFileTool",
    "NasaAction",
    "NavigateBackTool",
    "NavigateTool",
    "O365CreateDraftMessage",
    "O365SearchEmails",
    "O365SearchEvents",
    "O365SendEvent",
    "O365SendMessage",
    "OpenAPISpec",
    "OpenWeatherMapQueryRun",
    "PubmedQueryRun",
    "RedditSearchRun",
    "QueryCheckerTool",
    "QueryPowerBITool",
    "QuerySQLCheckerTool",
    "QuerySQLDataBaseTool",
    "QuerySparkSQLTool",
    "ReadFileTool",
    "RequestsDeleteTool",
    "RequestsGetTool",
    "RequestsPatchTool",
    "RequestsPostTool",
    "RequestsPutTool",
    "SteamWebAPIQueryRun",
    "SceneXplainTool",
    "SearxSearchResults",
    "SearxSearchRun",
    "ShellTool",
    "SlackGetChannel",
    "SlackGetMessage",
    "SlackScheduleMessage",
    "SlackSendMessage",
    "SleepTool",
    "StdInInquireTool",
    "StackExchangeTool",
    "SteamshipImageGenerationTool",
    "StructuredTool",
    "Tool",
    "VectorStoreQATool",
    "VectorStoreQAWithSourcesTool",
    "WikipediaQueryRun",
    "WolframAlphaQueryRun",
    "WriteFileTool",
    "YahooFinanceNewsTool",
    "YouTubeSearchTool",
    "ZapierNLAListActions",
    "ZapierNLARunAction",
    "format_tool_to_openai_function",
    "tool",
]
